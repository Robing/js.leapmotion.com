  
<h1> Leap Space</h1>

<p> We've spawned Unicorns, and counted fingers. You're probably thinking that there is no reason to keep going. What else could there possibly be that would be more interesting and beautiful than what we have already created. It might be hard to believe, but this is the tutorial where things start to get interesting.</p>


<p> The problem is that interesting also means a bit of math. During this tutorial we are going to convert the positions of the fingers we get from the leap data, and convert them so that they are placed correctly on the page. We'll start at a similar point as last time by setting up the canvas, getting its width and height, and creating the controller


<pre class="prettyprint language-html">

&lt;canvas id="canvas"&gt;&lt;/canvas&gt;
&lt;button onclick="controller.connect()"&gt;Count Fingers ( Connect Controller )&lt;/button&gt;

&lt;script src="//js.leapmotion.com/0.2.0/leap.min.js"&gt;&lt;/script&gt;

&lt;script&gt;

  var canvas = document.getElementById( 'canvas' );

  var c =  canvas.getContext( '2d' );

  var width = canvas.width;
  var height = canvas.height;

  var controller = new Leap.Controller();

  controller.on( 'frame' , function( frame ){

     //New code will go here.

  });

  controller.connect();

&lt;/script&gt;

</pre>

<p> I'm over using the button to connect the leap, so from now on we'll just connect the leap  in the script, rather than on button click. Other than that, the code starts exactly the same way as our glorious fingercounter.</p>

<p> Last tutorial we talked about the canvas coordinate system, so this tutorial lets talk a bit about the leap coordinate system.</p>


<div class = "tutorialImageHolder">
  <img src="images/tutorials/tutorial3/leapCoordinates.png"/>
  <p> Fig 1. The Leap coordinate system </p>
</div>

<p> The Leap's coordinate system should seem pretty intuitive from the very beginning. Just imagine that the leap is origin of the system, and it from there you can imply anything else. </p>

<p> Some of the ramifications of this system is that the Y part of the position will ALWAYS be positive. Additionally because the leap cannot see when your finger is almost touching it, the Y part of the position will also have a minimum that is not really close to 0. </p>

<div class = "tutorialImageHolder">
  <img src="images/tutorials/tutorial3/leapShape.png"/>
  <p> Fig 2. What the Leap sees.</p>
</div>


<p> If you remember using the Orientation when you first got your leap, you will remember that the shape of the area that the leap sees is sort of like a super-flat balloon. This means that the edges of the coordinate system are a bit difficult to imagine.</p>

<p> There are a few ways to get around this, but my personal favorite is to use a fabulous tool called the interaction box.</p>

<div class = "tutorialImageHolder">
  <img src="images/tutorials/tutorial3/interactionBox.png"/>
  <p> Fig 3. Interaction Box</p>
</div>

<p> The interaction box is basically a box that sits within the view area of the Leap. It will dynamically change sizes based on how the user is interacting with the Leap. For example if the user is resting their hand very close to the leap make making small movements, the interaction box will scale so that it is smaller, and its center is closer to the leap. However if the user is making large movements and using up the entirety of theview area, the interaction box will scale so that it takes up as much of the view area as possible.</p>

<p> The only problem with the interaction box is that even when it is scaled as large as possible, alot of the view area will still lie outside the interaction box, simply because a cube is not a flat balloon. This being said, a cube is easier to work with, easier to imagine, and in general is much more useful that the invisible digribile that is the Leap view area.











<p> As usual, your feedback is extroidinarily helpful, so please email me at icohen@leapmotion.com, sent me something on twitter ( @cabbibo ) or comment on the github page. </p>

<div class="tutorialHolder">
      
      <div class="tutorialDemo">
        <h3>Frames</h3>
        <canvas class="tutorialCanvas" id="canvas"></canvas>
        <button onclick="controller.connect()">Count Fingers ( Connect Controller ) </button>
      </div>

      <div class="tutorialCode">
        <h3> Code </h3>
        <div class="fixedHeightCode">
          <xmp>

          var canvas = document.getElementById('canvas');

          var c =  canvas.getContext('2d');

          var width = canvas.width;
          var height = canvas.height;

          var controller = new Leap.Controller();
         
          controller.on( 'frame' , function(frame){

            // Clears the canvas so frames don't build on each other.
            c.clearRect(0, 0, width, height);

            // Gets the number of fingers in each frame
            var numberOfFingers = frame.fingers.length;

            // Defines the font shape and size
            c.font = "30px Arial";

            // Tells Canvas how to align text
            c.textAlign = 'center';
            c.textBaseline = 'middle';

            // Tells Canvas to draw the The number of fingers,
            // at the center of the canvas
            c.fillText( numberOfFingers , width/2 , height/2 );
          
          
          });

 
          </xmp>
        </div>

      </div>


    </div>


    <ul class="nav nav-pills pull-left">
      <li><a href="/tutorials" data-menu="tutorials">Hit There</a></li>
      <li><a href="/tutorial1" data-menu="tutorial1">Tutorial 1 : Creating Connection</a></li>
      <li><a href="/tutorial3" data-menu="tutorial3">Tutorial 3 : How Many Hands do you have</a></li>
    </ul>
    <br/><br/>


    <!-- THE SCRIPT FOR THIS DEMO -->
    <script>

      var canvas = document.getElementById('canvas');

      var c =  canvas.getContext('2d');

      var width = canvas.width;
      var height = canvas.height;

      var controller = new Leap.Controller();
     
      controller.on( 'frame' , function(frame){

        // Clears the canvas so frames don't build on each other.
        c.clearRect(0, 0, width, height);

        // Gets the number of fingers in each frame
        var numberOfFingers = frame.fingers.length;

        // Defines the font shape and size
        c.font = "30px Arial";

        // Tells Canvas how to align text
        c.textAlign = 'center';
        c.textBaseline = 'middle';

        // Tells Canvas to draw the The number of fingers,
        // at the center of the canvas
        c.fillText( numberOfFingers , width/2 , height/2 );
      
      
      });

      //controller.connect();

    </script>
