
  
<h1> Creating Connection </h1>

<div id="intro" class="doc-section">

  <h2 class = "page-title"> Intro </h2>

  <p> If you are stilll here, it presumably means that you want to learn how to use the leap to make cool stuff. If that is not the case, either start wanting that, or leave, because its what we are about to start doing. By the end of this tutorial we will have not only learned about DOM, Canvas, and Leap, but also will have brought a unicorn into existance. Seems like alot for one tutorial, but this is the power of the Leap!</p>

  <p> Before we begin, I just want to say again that I am bad at typing, grammar, and optimization. Therefore, if you see anything wrong with those things, please shoot me an email at icohen [at] leapmotion [dot] com . I am always trying to improve these tutorials, and your feedback is of VITAL importance for that.</p>

  <p> Even though you are on js.leapmotion.com, I want to just explain why I believe this is one of the best ways to learn about Leap in general. We will be using javascript , mostly so we can do things like live coding, but also because javascript is the language of the internet, and the internet is the FUTURE. Knowing javascript is definitely useful for these tutorials, but I will try to keep it simple enough that even someone who has only glimpsed at javascript a few times will be able to understand the code. Although most of the actual Leap API calls are relatively language agnostic, the tools we will be using are specifically browser based. In addition to learning more about the Leap API, I sincerely hope that you learn javascript, webGL and other creative web tools.</p>

  <p> The first thing we will be learning about is how to create a leap controller. This may seem a bit trivial, but the journey of 1,000 miles begins with connecting your controller. </p>

</div>

<div id="creatingTheCanvas" class="doc-section">

  <h2 class = "page-title"> Creating the Canvas </h2>

  <p> We have to start by setting up a canvas to draw on. For the first set of tutorials we will be working pretty exclusively with canvas. If you have never used or even heard of canvas before, thats ok! I'll try to explain as much as I can, and anything that I can't, I'll make sure there is access to some good resources. If you want to learn more about canvas itself, I would check out this phenomenal set of tutorials: <a href="http://www.html5canvastutorials.com/tutorials/html5-canvas-tutorials-introduction/" target="_blank"> HTML 5 Canvas Tutorials </a>

  <p> If we are going to be using canvas, we better create a canvas. A canvas element is pretty much exactly what the name describes. It is a place where you can draw things. So to start off, lets add the canvas element to the body of the document, like so:</p>
  
<pre class="prettyprint language-html">

  &lt;canvas id="canvas"&gt;&lt;/canvas&gt;

</pre>

  <p>Much easier than going to a store and having to shell out your hard earned dollars.</p>

</div>

<div id="includingLeap" class="doc-section">

  <h2 class = "page-title"> Including Leap.js </h2>



  <p> After the canvas element, we need to make sure that we include the leap script, like this:</p>
  
<pre class="prettyprint language-html">
  
  &lt;script src="//js.leapmotion.com/0.2.0/leap.min.js"&gt;&lt;/script&gt;

</pre>

  By letting leapmotion.com deal with the hosting, you don't have to worry about hosting your own file, and you will also see that as we create new versions of leap.js they will be updated on <a href="http://js.leapmotion.com" target="_blank">js.leapmotion.com</a>.</p>

  <p> This is pretty much the only administrative work we have to do before we get to the actual javascript, so if you've made it this far, we are ready to BEGIN! Each new tutorial we will be adding to the previous ones, so I promise the pain and horror of doing DOM is done.</p>

</div>


<div id="preparingTheCanvas" class="doc-section">

  <h2 class = "page-title"> Preparing The Canvas </h2>

  <p> First things first, lets define our canvas element by finding the DOM element with the id 'canvas' . ( Make sure you don't give anything else on the page an id of canvas )</p>

<pre class="prettyprint language-html">var canvas = document.getElementById('canvas');</pre>

<div class = "tutorialImageHolder">
  <img src="/images/tutorials/creatingConnection/badTime.png"/>
  <p> Fig 1. Make Sure its a 2D context.</p>
</div>
     
  <p>If you want to verify, call a console.log(canvas) to delve deeper into the innerworkings of html. After you have sasiated your desire to learn, which console.logging so often does, define the context of your canvas drawing:</p>
      
<pre class="prettyprint language-html">

  var c = canvas.getContext('2d'); 
  
</pre>

  <p>Doing this basically tells canvas how you want to draw. Indeed we will be using the canvas element even when we get to using webGL, but in these future lessons, we will be using a different context. Each context behaves differently, so make sure you know which one you are using.</p>

</div>


<div id="theLeapController" class="doc-section">

  <h2 class = "page-title"> The Leap Controller </h2>

  <p> Now that our canvas is set up and ready for us to create our masterpiece, lets get into the nitty gritty of the leap.js controller. The creation of the controller is another one liner:</p>

<pre class="prettyprint language-html">
  
  var controller = new Leap.Controller(); 
  
</pre>

  <p>but with this one line, you harness the energy of thousands of man-hours dedicated to the hardware and software of the Leap. If you don't feel like a God for obtaining this much power with less than a tweet of characters, don't worry, you soon will. The controller not only determines when to connect the leap, but as well acts as a listener to all the leap events. It is where you get all of the data passed through the leap device and is considered by some to be the eternal resting place of King Arthur. If you want to read more about the different event types you can access, check out <a href="http://js.leapmotion.com/start" target="_blank"> Getting Started on leapjs</a>.</p>
  
</div>

<div id="connectionIsKey" class="doc-section">

  <h2 class = "page-title"> Connection is Key</h2>


  <p>For now we are going to be focused around the connection events. First lets set up a listener to tell us when the leap connects with the server:</p>

<pre class="prettyprint language-html">

  controller.on( 'connect' , function(){
        
    console.log( 'Successfully connected.' );

  });

</pre>

  <p>This general setup is used everytime we want the controller to listen to a leap event. We simply tell the controller what event to listen to, and what function to call when that event occurs. This allows us to additionally seperate out code so that we can predefine the function, and simply call it on an event, like so:</p>

<pre class="prettyprint language-html">

  function onControllerConnect(){

    console.log( 'Successfully connected.' );

  }

  controller.on( 'connect' , onControllerConnect );

</pre>

  <p>Although this example is simple enough that we don't really need to break it down as we have above, when the code gets more complex, this will help us parse it into more resonable chunks, and seperate it out so we at least get to have the illusion of being organized.</p>
  
  <p>One thing that is important to note about the connect event is that it will be fired, even if a Leap Motion Device is not connected. That is because this connect event is related to the connection between the leap application and the websocket server. It is not saying that we are actually passing data through, simply that we have set up the pipeline for that data to flow freely. However, there are some other events that we can set up to listen to the connection of the device directly:</p>

<pre class="prettyprint language-html">

  controller.on( 'deviceConnected' , function() {

    console.log( 'A Leap device has been connected.' );

  });

  controller.on( 'deviceDisconnected' , function() {

    console.log( 'A Leap device has been disconnected.' );

  });

</pre>

  <p>This pair of events will tell us when a device is connected or disconnected. To see it in action try unplugging and plugging in your device. Although there is a slight delay when your device gets plugged in, the unplug event should get called almost instantaneously. Another small note to make is that these events will only get called when the device gets connected, meaning that if a user accesses a webpage with their leap already plugged in, neither of these events will fire.</p>

  <p>These listeners are great for plugging in and unplugging your device, but I can only think of a handful of games that might make use of this. But if we are creating a webapp where we expect users to already have their leap plugged in, even before arriving at the site, we need another event. The 'ready' invent basically checks if the websocket server is connected, and a device is connected, and when both of those statements are true, the event fires, letting us that the leap is ready to release its limitless energy. It is this event that we will use to manifest our unicorn, and will be the last event we look at for this tutorial. The event is set up like any other event:</p>

<pre class="prettyprint language-html">

  controller.on( 'ready' , function(){

    // Ready code will go here

  });

</pre>

<div id="unicornTime" class="doc-section">

  <h2 class = "page-title"> UNICORN TIME! </h2>

  <p>Inside of the controller's <code>'ready'</code> function call, we are going to do some canvas fengaling, AKA unicorn creation. But first off we create need to make sure our unicorn is ready to be spawned. Near the top of the scrip we will create a variable that will hold the unicorn before we bring it to life.</p>

<pre class="prettyprint language-html">

  var img = document.createElement('img');
  
</pre>

  <p> We than pass our unicorn into this variable by setting its source to point towards our unicorn file.</p>

<pre class="prettyprint language-html">

  img.src = "img/unicorn1.png";
  
</pre>

<p> Now that we have made the code to prepare, We can actualize it inside our <code>'ready'</code> event, letting its mystical glory shine upon the land of mere mortals, by calling another one lined function:</p>

<pre class="prettyprint language-html">
  
  c.drawImage( img , 0 , 0 );
  
</pre>

  <p>This last function is really the only thing we are doing with canvas, but since I promised unicorns, we need to make unicorns. The first input of this function is the image we are drawing, while the second and third inputs are the x and y position. We will be talking more about the canvas coordinate system in later lessons, but for now just know that this draws the image in the upper left corner. If you have your leap plugged in, once you press the 'Spawn Unicorn' button,  you should see our new best friend, the unicorn.</p>

  <p>The last thing we need to do is to actually connect the device. Although you could call this in whatever function you are using to initialize the scene, I've decided to add an button to click to connect the device, just to add to the unbearable tension of wanting to see the unicorn:</p>

<pre class="prettyprint language-html"> 

  &lt;button onclick="controller.connect"&gt;Spawn Unicorn (Connect Controller)&lt;/button&gt;
  
</pre>

</div>


<div id="weDidIt" class="doc-section">

  <h2 class = "page-title"> We Did It!</h2>


  <p>This might seem like alot of work just to create a unicorn ( as stunningly beautiful as it is ), but keep in mind that now that we have learned some of these basics, we can put them to use in each subsequent tutorials, until we are able to create life itself. Thanks for sticking through this tutorial if you made it all the way down here, and let me know how they can be improved by sending me an email, letting me know in the comments, or hitting me up on twitter ( @cabbibo ).</p>

  <p>One more thing, the actual demo:</p>

</div>

<div id="demo" class="doc-section">

  <h2 class = "page-title"> Demo </h2>




    <div class="tutorialHolder">
      
      <div class="tutorialDemo">
        <h3>Connection</h3>
        <canvas class="tutorialCanvas" id="canvas"></canvas>
        <button onclick="controller.connect()">Spawn Unicorn (Connect Controller)</button>
      </div>

      <div class="tutorialCode">
        <h3> Code </h3>
        <div class="fixedHeightCode">
<xmp>
<html>
  <body>

    <canvas id="canvas"></canvas>
    <button onclick="controller.connect()">
      Spawn Unicorn (Connect Controller)
    </button>

    <script src="//js.leapmotion.com/0.2.0/leap.min.js"></script>

    <script>

      // Pulling the Canvas DOM element into Javascript
      var canvas = document.getElementById('canvas');

      // Setting up the context we want to use
      var c =  canvas.getContext('2d');

      // Prepping our unicorn
      var img = document.createElement('img');
      img.src = "/images/tutorials/tutorial1/unicorn1.png";

      // Creating our leap controller
      var controller = new Leap.Controller();

      // Proving that the websocket is open
      controller.on( 'connect' , function(){

        console.log( 'Successfully connected.' );

      });

      // Proving that a device can be connected
      controller.on( 'deviceConnected' , function() {

        console.log('A Leap device has been connected.');

      });

      // And that it can be disconnected
      controller.on( 'deviceDisconnected' , function() {

        console.log( 'A Leap device has been disconnected.' );

      });

      // When the controller is ready, spawn the unicorn!
      controller.on( 'ready' , function(){

        c.drawImage( img , 0 , 0 );
       
      });

    </script>

  </body>
</html>
</xmp>
        </div>
      </div>
    </div>
  </div> 

    <script>

    // Pulling the Canvas DOM element into Javascript
    var canvas = document.getElementById('canvas');

    // Setting up the context we want to use
    var c =  canvas.getContext('2d');

    // Prepping our unicorn
    var img = document.createElement('img');
    img.src = "/images/tutorials/tutorial1/unicorn1.png";

    // Creating our leap controller
    var controller = new Leap.Controller();

    // Proving that the websocket is open
    controller.on( 'connect' , function(){

      console.log( 'Successfully connected.' );

    });

    // Proving that a device can be connected
    controller.on( 'deviceConnected' , function() {

      console.log('A Leap device has been connected.');
 
    });

    // And that it can be disconnected
    controller.on( 'deviceDisconnected' , function() {

      console.log( 'A Leap device has been disconnected.' );

    });

    // When the controller is ready, spawn the unicorn!
    controller.on( 'ready' , function(){

      c.drawImage( img , 0 , 0 );
     
    });

    </script>
