
  
<h1> Leap Space </h1>

<!-- Intro -->
<div id="intro" class="doc-section">
  
  <h2 class = "page-title"> Intro </h2>
  
  <p> We've spawned Unicorns, and counted fingers. You're probably thinking that there is no reason to keep going. What else could possibly be more interesting and beautiful than what we have already created. It might be hard to believe, but this is the tutorial where things start to get interesting.</p>

  <p> The problem is that interesting also means a bit of math. During this tutorial we are going to convert the positions of the fingers we get from the leap data, and convert them so that they are placed correctly on the page. We'll start at a similar point as last time by setting up the canvas, getting its width and height, and creating the controller:</p>

</div>



<!-- Created Foundation -->

<div id="createdFoundation" class="doc-section">
  
  <h2 class = "page-title"> Created Foundation </h2>
        
<pre class="prettyprint language-html">

  &lt;canvas id="canvas"&gt;&lt;/canvas&gt;
    
  &lt;script src="//js.leapmotion.com/0.2.0/leap.min.js"&gt;&lt;/script&gt;

  &lt;script&gt;

    var canvas = document.getElementById( 'canvas' );

    var c =  canvas.getContext( '2d' );

    var width = canvas.width;
    var height = canvas.height;

    var controller = new Leap.Controller();

    controller.on( 'frame' , function( frame ){

      c.clearRect( 0 , 0 , width , height );

    });

    controller.connect();

  &lt;/script&gt;

</pre>

  <p> I'm over using the button to connect the leap, so from now on we'll just connect the leap  in the script, rather than on button click. Other than that, the code starts exactly the same way as our glorious fingercounter.</p>

</div>



<!--  Leap Coordinate System -->

<div id="leapCoordinateSystem" class="doc-section">
  
  <h2 class = "page-title"> Leap Coordinate System </h2>

  <div class = "tutorialImageHolder">
    <img src="/images/tutorials/leapSpace/leapCoordinates.png"/>
    <p> Fig 1. The Leap coordinate system </p>
  </div>

  <p> Last tutorial we talked about the canvas coordinate system, so this tutorial let's talk a bit about the leap coordinate system.</p>


  <p> The Leap's coordinate system should seem pretty intuitive from the very beginning. Just imagine that the leap is origin of the system, and it from there you can imply anything else. </p>

  <p> Some of the ramifications of this system is that the Y part of the position will ALWAYS be positive. Additionally because the leap cannot see when your finger is almost touching it, the Y part of the position will also have a minimum that is not very close to 0. </p>

</div>





<!-- Interaction Box -->

<div id="interactionBox" class="doc-section">
  
  <h2 class = "page-title"> Interaction Box </h2>


  <div class = "tutorialImageHolder">
    <img src="/images/tutorials/leapSpace/fieldOfView.jpg"/>
    <p> Fig 2. What the Leap sees.</p>
  </div>


  <p> If you remember using the Orientation when you first got your leap, you will remember that the shape of the area that the leap sees is sort of like a super-flat balloon. This means that the edges of the coordinate system are a bit difficult to imagine and difficult to work with because they are very much not a cube.</p>

  <p> There are a few ways to get around this, but my personal favorite is to use a fabulous tool called the interaction box.</p>

  <p> The interaction box is basically a box that sits within the view area of the Leap. It will dynamically change sizes based on how the user is interacting with the Leap. For example if the user is resting their hand very close to the leap, making small movements, the interaction box will scale so that it is smaller, and its center is closer to the leap. However if the user is making large movements and using up the entirety of the view area, the interaction box will scale so that it takes up as much of the view area as possible.</p>

  <p> The only problem with the interaction box is that even when it is scaled as large as possible, alot of the view area will still lie outside the interaction box, simply because a cube is not a flat balloon. This being said, a cube is easier to work with, easier to imagine, and in general is much more useful that the invisible dirigible that is the Leap view area.

</div>



<!-- Conversion Code -->

<div id="conversion" class="doc-section">
    
    <h2 class = "page-title"> Conversion Code </h2>

    <p> Now that we know a bit more about each of the coordinate systems that we need to convert from and to, lets start creating the function to do it. Because we need to use this function every time we want to deal with a position, lets seperate it out.</p>

    <p> The first thing we need to do is pass in a leap position. We will see how to access specific positions later in the code, but for now, just know that a position in Leap Space is an array of three values: x , y , and z.</p>

    <p> Right now we aren't going to care about the z-space because we are in the 2D canvas context. If you stick around for long enough though, we definitly will be getting that 3rd dimension, which is where beauty truly occurs.</p>

    <p> The first thing we need to do is pass in the proper variables. I am currently choosing to pass in two variables, the frame, and a Leap Position. The reason we need to pass in the frame is because the interaction box is part of the frame. We could do something such as keeping a global version of the frame that we can access throughout the program. For now, passing it through should be enough.</p>    

    
<pre class="prettyprint language-html">

  function leapToScene( frame , leapPos ){

    //New code will go here
    
  }

</pre>

    <p> In order to write the the Leap Position in the canvas coordinate system, we first need to get the top left point that we are going to interact with. We will do this by determining the top and left side of the interaction area, which can we easily defined as the top and left side of the interaction box. </p>

    <p> To get the top and left, we simply define a variable that is the interaction box, find its center in the y position: <code>iBox.center[1]</code>  and add half its size in the y axis: <code>iBox.size[1]/2</code>. The exact same thing can be done in order to determine the left side of the interaction area. However to get the left side we need to subtract half of the box size, because the Leap Coordinate system x-axis vector points to the right. </p>
        
<pre class="prettyprint language-html">

  var iBox = frame.interactionBox;

  var top = iBox.center[1] + iBox.size[1]/2;
  var left = iBox.center[0] - iBox.size[0]/2;

</pre>
  
    <p> Now that we've found the left and top parts of the coordinate system, we can write the Leap Position in terms of this new origin by just subtracting it from the Leap Position: </p>

<pre class="prettyprint language-html">

  var x = leapPos[0] - left;
  var y = leapPos[1] - top;

</pre>

    <p> Now we are getting pretty close to having a conversion function, but something is still wrong: The scale of the interaction area. We want to make sure that the interaction box is mapped fully to the size of the canvas, so that the moving to the top left area of the interaction box will take you to the top left corner of the canvas, and moving to the bottom right will take you to the bottom right corner of the canvas. </p>

    <p> To do this part of the conversion, we basically just need to make sure that x and y exist only between 0 and 1, and than multiply them by the height and width of the canvas.</p>

<pre class="prettyprint language-html">

  x /= iBox.size[0];
  y /= iBox.size[1];

  x *= width;
  y *= height;

</pre>


    <p> The last thing we need to do is return this position, keeping in mind that the Y part of it needs to be negative because the canvas coordinate system goes down instead of up. Lets look at the leapToScene function altogether:</p>


<pre class="prettyprint language-html">

  function leapToScene( frame , leapPos ){

    var iBox = frame.interactionBox;

    var left = iBox.center[0] - iBox.size[0]/2;
    var top = iBox.center[1] + iBox.size[1]/2;

    var x = leapPos[0] - left;
    var y = leapPos[1] - top;

    x /= iBox.size[0];
    y /= iBox.size[1];

    x *= width;
    y *= height;

    return [ x , -y ];

  }

</pre>


</div>



<! -- Fingers and Hands -->

<div id="drawingFingersAndHands" class="doc-section">
  <h2 class = "page-title"> Drawing Fingers & Hands</h2>

  <p> Now that we have created the method for converting the position of a leap object to our scene space, the rest of it should be a breeze. We just need to draw a circle at every finger, and because we are ridiculous over acheievers, we are going to even draw a cirle at every hand. We could stop here, but why not also draw a line from the hand from every finger to the hand it belongs to.</p>

  
  <p> We'll start off this process by creating a loop which will not only loop through every hand, but also every finger on that hand. In the previous example we accessed the fingers directly from the frame object. This time around we'll do it through the hands, because then we will know which hand each pointable belongs to.</p>



<pre class="prettyprint language-html">

  for( var i=0; i < frame.hands.length; i++ ){

    var hand = frame.hands[i];

    for( var j = 0; j < hand.fingers.length; j++ ){

      var finger = hand.fingers[j];

    }

  }

</pre>

  <p> Seems reasonable enough. We loop through the <code>frame.hands</code> array, and for each hand we find, we loop through the <code>hand.fingers</code> array. Now all we need is the drawing code. We'll start by drawing the hand.</p>

  <p> To draw a circle in canvas, we can do one of two things: create a circle path and fill it, or create a circle path and stroke around the path. For the sake of diversity we will fill the hand circle, and stroke the finger circles. Before we stroke and fill the paths, we're going to have to decide how they look. By default canvas will stroke and fill in black, but since color is miraculous, lets start building our own color theme we will use throughout these tutorials.</p>

  <p> I love using this site: http://colorschemedesigner.com/ to pick out a color theme, and generally like the accented analogic color theme. https://kuler.adobe.com is also an amazing resource for choosing colors, so its all about personal preferance. Since Mastermind Pohung Chen always says the best color combo is blue and orange, we'll be using this theme for most of our tutorials: http://colorschemedesigner.com/#0.61Tw0w0w0w0 . Lets make the hands <code>#FF5A40</code> , the connections <code> #FFA040</code> and the fingers <code>#39AECF</code>. Now that we have our colors choosen, lets figure out how to put them into code.</p>

  <p> To draw the circle we need to specify a fill color since we have decided to fill rather than stroke it. Also we need to create a path to fill. To do this, we first convert out <code>hand.palmPosition</code> to canvas coordinates using our brilliantly designed <code>leapToScene</code> function. We will than set up the style of the circle. Lastly we start a path, create the circle using the <code>arc</code> function, close the path, and finally fill the path. The canvas <code>arc</code> function takes in 6 parameters. The first two are the position, the third is the radius, the Fourth and Fifth are the beginning and ending angles of the arc, and the Sixth is whether the path is created clockwise or counterclockwise. This last parameter is optional, and in the case of creating a circle is also totally unneccesary. Since we are trying to draw a circle at the position of the hand, we will pass in this position as the first two parameters. We'll make the radius 10, just because thats a pretty number. The starting and finishing angles we'll have to make <code>0</code>, and <code>Math.PI * 2</code> so that it creates a full loop ( as you can hopefully tell, canvas uses radians rather than degress ). </p>


<pre class="prettyprint language-html">

  // Getting our position
  var handPos = leapToScene( frame , hand.palmPosition );

  // Setting up the style for the fill
  c.fillStyle = "#FF5A40";

  // Draw a circle
  c.beginPath();
  c.arc(handPos[0], handPos[1], 10, 0, Math.PI*2); 
  c.closePath();
  c.fill();

</pre>


  <div class = "tutorialImageHolder">
    <img src="/images/tutorials/leapSpace/pukeGreen.png"/>
    <p> Fig 3. This color usually sucks.</p>
  </div>

  <p> One important thing to remember about canvas is that once you declare an aspect of it, such as <code>fillStyle</code> or <code>strokeStyle</code> it will keep track of that. If we wanted to fill everything the same color, we could set the <code>fillStyle</code> once at the very beginning and just start drawing. This memory, however also means that we need to do alot of switching back and forth to make sure that everything gets drawn the right color. In general I try to set the color directly before the object gets drawn. This might lead to a some unnecessary calls to canvas, but it is certainly better than drawing puke green instead of marigold.</p>

  <p> Another part of drawing with canvas is that the order you call the draw functions will be the order canvas draws in. This is obviously the only logical way to do it, but it also means that we need to make sure we draw our circles in the proper order. I want to have the hand circle cover up the connection lines as well as the fingertips circles, and I also want the fingertip circles to cover up the connection lines. This means that I will have to call the hand circle function AFTER I call the fingertip circle draw function call, which I will have to call AFTER the connection line function call. We'll be able to see the exact order once we learn how to draw the fingers and the connection lines.</p>

  <p> Lets learn how to draw the fingers next. It will look almost identical, except instead of filling the path we are going to stroke it, meaning that we will also have to set the <code>strokeStyle</code> and if our hearts so desire the <code>lineWidth</code> attribute, which will change how wide the stroke will be. I'd like to keep the connection lines relatively skinny, and the fingertip circles super fat, so our finger tip drawing code will look something like this: </p>


<pre class="prettyprint language-html">

  // Getting our position
  var fingerPos = leapToScene( frame , finger.fingerPosition );

  // Setting up the style for the stroke
  c.strokeStyle = "#39AECF";
  c.lineWidth = 5;

  // Draw a circle
  c.beginPath();
  c.arc(fingerPos[0], fingerPos[1], 6, 0, Math.PI*2); 
  c.closePath();
  c.stroke();

</pre>

<p> Lastly we've got to draw those connection lines. We are going to be drawing them from the hand position to the finger position, both of which we've already found, so all we will need to do is define the look and feel of the line, and than draw a line from one point to the other. The canvas call to draw a line is <code>lineTo</code> , but it only has 2 parameters: the x and y of the position. What this function basically does is draw a line to the point passed through, from the point that the canvas context is currently at. This means that first we need to move the canvas to the starting point, and than call the <code>lineTo</code> towards the final point. To move the context we will use <code>moveTo</code>. With these two function calls we can easily draw our connection lines:</p>


<pre class="prettyprint language-html">

  // Setting up the style for the stroke
  c.strokeStyle = "#FFA040";
  c.lineWidth = 3;

  // Drawing the path
  c.beginPath();
  c.moveTo(   handPos[0] ,   handPos[1] );
  c.lineTo( fingerPos[0] , fingerPos[1] );
  c.closePath();
  c.stroke();

</pre>


<p> Now that we understand each part of the drawing, we need to pull them all together in the right order. Remember that the hand needs to be drawn after the fingers which need to be drawn after the connection, however the connection needs the position of both the finger and the hand. Because of all this the loop will look like this:</p>


<pre class="prettyprint language-html">

  for( var i=0; i < frame.hands.length; i++ ){

    var hand = frame.hands[i];

    // Getting our hand position
    var handPos = leapToScene( frame , hand.palmPosition );


    for( var j = 0; j < hand.fingers.length; j++ ){

      var finger = hand.fingers[j];

      // Getting our finger position
      var fingerPos = leapToScene( frame , finger.fingerPosition );

    
      /*
          First Draw the Connection
      */

      // Setting up the style for the stroke
      c.strokeStyle = "#FFA040";
      c.lineWidth = 3;

      // Drawing the path
      c.beginPath();
      c.moveTo(   handPos[0] ,   handPos[1] );
      c.lineTo( fingerPos[0] , fingerPos[1] );
      c.closePath();
      c.stroke();


      /*
          Second Draw the Finger
      */

      // Setting up the style for the stroke
      c.strokeStyle = "#39AECF";
      c.lineWidth = 5;

      // Draw a circle
      c.beginPath();
      c.arc(fingerPos[0], fingerPos[1], 6, 0, Math.PI*2); 
      c.closePath();
      c.stroke();

    }


    /*
        Third draw the hand
    */

    // Setting up the style for the fill
    c.fillStyle = "#FF5A40";

    // Draw a circle
    c.beginPath();
    c.arc(handPos[0], handPos[1], 10, 0, Math.PI*2); 
    c.closePath();
    c.fill();

  }

</pre>


<p> And just like that we've made a beatifully pyschedelic hand model. </p>

</div>

<div id="weDidIt" class="doc-section">   
    <h2 class = "page-title"> We Did It!</h2>

    <div class = "tutorialImageHolder">
      <img src="/images/tutorials/leapSpace/youAreSmart.gif"/>
      <p> Fig 4. GOOD JOB </p>
    </div>

    <p>Congrats. You made it to the end. You learned more about coordinate systems. You've learned how to draw circles and lines, and you've learned how to define styles for canvas. Thats a lot for one tutorial, so good job for making it all the way through. Theres going to be many more fun creations in the future, so make sure you stick with it, and soon enough you'll be a master of the Leapernet! Next stop: Gestures.</p>

    <p> As usual, your feedback is extroidinarily helpful, so please email me at icohen@leapmotion.com, sent me something on twitter ( @cabbibo ) or comment on the <a href="https://github.com/leapmotion/js.leapmotion.com" target="_blank"> github </a> page. Also, if you know of anything that people should know about leap.js, please consider writing a tutorial. We'd love to have you as a leader in our community.</p>

    <p> And one last thing, The demo:</p>
</div>

<div id="demo" class="doc-section">   
    <h2 class = "page-title" > Demo </a>
</h2>

    
  <div class="tutorialHolder">
        
        <div class="tutorialDemo">
          <p data-height="500" data-theme-id="1367" data-slug-hash="lghCF" data-user="cabbibo" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/cabbibo/pen/lghCF'>lghCF</a> by Isaac Cohen (<a href='http://codepen.io/cabbibo'>@cabbibo</a>) on <a href='http://codepen.io'>CodePen</a></p>
          <script async src="http://codepen.io/assets/embed/ei.js"></script>
        
        </div>
    </div>
  </div>
</div>


    
