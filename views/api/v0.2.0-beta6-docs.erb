<h1>Docs for v0.2.0-beta6</h1>
<div id="index" class="doc-section">
    
    <h2 class="page-title">Index</h2>
    
    


    


    <h4> </h4>









    




    <section>
        <article><h2>LeapJS</h2>

<p>Welcome to the Leap JavaScript framework. This is intended for use with the Leap (https://www.leapmotion.com/).</p></article>
    </section>






</div>
<div id="leap" class="doc-section">
    
    <h2 class="page-title">Namespace: Leap</h2>
    
    



<section>
    
<header>
    <h3>
    Leap
    </h3>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
            <div class="description">Leap is the global namespace of the Leap API.</div>
        
        
        
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>index.js</span>, <span>line 1</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

        
        
    
    </div>
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Classes</h4>
        
        <dl>
            <dt><span>CircleGesture</span></dt>
            <dd></dd>
        
            <dt><span>Controller</span></dt>
            <dd></dd>
        
            <dt><span>Frame</span></dt>
            <dd></dd>
        
            <dt><span>Gesture</span></dt>
            <dd></dd>
        
            <dt><span>Hand</span></dt>
            <dd></dd>
        
            <dt><span>InteractionBox</span></dt>
            <dd></dd>
        
            <dt><span>KeyTapGesture</span></dt>
            <dd></dd>
        
            <dt><span>Pointable</span></dt>
            <dd></dd>
        
            <dt><span>ScreenTapGesture</span></dt>
            <dd></dd>
        
            <dt><span>SwipeGesture</span></dt>
            <dd></dd>
        </dl>
    
    
    
    
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="loop">
<span class="type-signature">&lt;static&gt; </span>loop<span class="signature">(callback)</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The Leap.loop() function passes a frame of Leap data to your
callback function and then calls window.requestAnimationFrame() after
executing your callback function.

Leap.loop() sets up the Leap controller and WebSocket connection for you.
You do not need to create your own controller when using this method.

Your callback function is called on an interval determined by the client
browser. Typically, this is on an interval of 60 frames/second. The most
recent frame of Leap data is passed to your callback function. If the Leap
is producing frames at a slower rate than the browser frame rate, the same
frame of Leap data can be passed to your function in successive animation
updates.

As an alternative, you can create your own Controller object and use a
onFrame callback to process the data at
the frame rate of the Leap device. See Controller for an
example.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>callback</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>
            
            
            
            
            
            <td class="description last">A function called when the browser is ready to
draw to the screen. The most recent Frame object is passed to
your callback function.

```javascript
   Leap.loop( function( frame ) {
       // ... your code here
   })
```</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>index.js</span>, <span>line 19</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>
<div id="index-js" class="doc-section">
    
    <h2 class="page-title">Source: index.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>/**
 * Leap is the global namespace of the Leap API.
 * @namespace Leap
 */
module.exports = {
  Controller: require("./controller"),
  Frame: require("./frame"),
  Gesture: require("./gesture"),
  Hand: require("./hand"),
  Pointable: require("./pointable"),
  InteractionBox: require("./interaction_box"),
  Connection: require("./connection"),
  CircularBuffer: require("./circular_buffer"),
  UI: require("./ui"),
  glMatrix: require("gl-matrix"),
  mat3: require("gl-matrix").mat3,
  vec3: require("gl-matrix").vec3,
  loopController: undefined,
  /**
   * The Leap.loop() function passes a frame of Leap data to your
   * callback function and then calls window.requestAnimationFrame() after
   * executing your callback function.
   *
   * Leap.loop() sets up the Leap controller and WebSocket connection for you.
   * You do not need to create your own controller when using this method.
   *
   * Your callback function is called on an interval determined by the client
   * browser. Typically, this is on an interval of 60 frames/second. The most
   * recent frame of Leap data is passed to your callback function. If the Leap
   * is producing frames at a slower rate than the browser frame rate, the same
   * frame of Leap data can be passed to your function in successive animation
   * updates.
   *
   * As an alternative, you can create your own Controller object and use a
   * {@link Controller#onFrame onFrame} callback to process the data at
   * the frame rate of the Leap device. See {@link Controller} for an
   * example.
   *
   * @method Leap.loop
   * @param {function} callback A function called when the browser is ready to
   * draw to the screen. The most recent {@link Frame} object is passed to
   * your callback function.
   *
   * ```javascript
   *    Leap.loop( function( frame ) {
   *        // ... your code here
   *    })
   * ```
   */
  loop: function(opts, callback) {
    if (callback === undefined) {
      callback = opts;
      opts = {};
    }
    if (!this.loopController) this.loopController = new this.Controller(opts);
    this.loopController.loop(callback);
  }
}
</code></pre>
        </article>
    </section>




</div>
<div id="leap-controller" class="doc-section">
    
    <h2 class="page-title">Class: Controller</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    Controller
    </h3>
    
        <div class="class-description">The Controller class is your main interface to the Leap Motion Controller.

Create an instance of this Controller class to access frames of tracking data
and configuration information. Frame data can be polled at any time using the
[Controller.frame]<span>Leap.Controller#frame</span>() function. Call frame() or frame(0) to get the most recent
frame. Set the history parameter to a positive integer to access previous frames.
A controller stores up to 60 frames in its frame history.

Polling is an appropriate strategy for applications which already have an
intrinsic update loop, such as a game.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="Controller">
<span class="type-signature"></span>new Controller<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a Controller object.

When creating a Controller object, you may optionally pass in options
to set the host , set the port, enable gestures, or select the frame event type.

```javascript
var controller = new Leap.Controller({
  host: '127.0.0.1',
  port: 6437,
  enableGestures: true,
  frameEventName: 'animationFrame'
});
```
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>controller.js</span>, <span>line 8</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="frame">
<span class="type-signature"></span>frame<span class="signature">(history)</span><span class="type-signature"> â†’ {<span>Leap.Frame</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Returns a frame of tracking data from the Leap.

Use the optional history parameter to specify which frame to retrieve.
Call frame() or frame(0) to access the most recent frame; call frame(1) to
access the previous frame, and so on. If you use a history value greater
than the number of stored frames, then the controller returns an invalid frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>history</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The age of the frame to return, counting backwards from
the most recent frame (0) into the past and up to the maximum age (59).</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>controller.js</span>, <span>line 98</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The specified frame; or, if no history
parameter is specified, the newest frame. If a frame is not available at
the specified history position, an invalid Frame is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Frame</span></span>


	</dd>
</dl>

        
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>
<div id="interaction_box-js" class="doc-section">
    
    <h2 class="page-title">Source: interaction_box.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var glMatrix = require("gl-matrix")
  , vec3 = glMatrix.vec3;

/**
 * Constructs a InteractionBox object.
 *
 * @class InteractionBox
 * @memberof Leap
 * @classdesc
 * The InteractionBox class represents a box-shaped region completely within
 * the field of view of the Leap Motion controller.
 *
 * The interaction box is an axis-aligned rectangular prism and provides
 * normalized coordinates for hands, fingers, and tools within this box.
 * The InteractionBox class can make it easier to map positions in the
 * Leap Motion coordinate system to 2D or 3D coordinate systems used
 * for application drawing.
 *
 * The InteractionBox region is defined by a center and dimensions along the x, y, and z axes.
 */
var InteractionBox = module.exports = function(data) {
  /**
   * Indicates whether this is a valid InteractionBox object.
   *
   * @member valid
   * @type {Boolean}
   * @memberof Leap.InteractionBox.prototype
   */
  this.valid = true;
  /**
   * The center of the InteractionBox in device coordinates (millimeters).
   * This point is equidistant from all sides of the box.
   *
   * @member center
   * @type {number[]}
   * @memberof Leap.InteractionBox.prototype
   */
  this.center = data.center;

  this.size = data.size;
  /**
   * The width of the InteractionBox in millimeters, measured along the x-axis.
   *
   * @member width
   * @type {number}
   * @memberof Leap.InteractionBox.prototype
   */
  this.width = data.size[0];
  /**
   * The height of the InteractionBox in millimeters, measured along the y-axis.
   *
   * @member height
   * @type {number}
   * @memberof Leap.InteractionBox.prototype
   */
  this.height = data.size[1];
  /**
   * The depth of the InteractionBox in millimeters, measured along the z-axis.
   *
   * @member depth
   * @type {number}
   * @memberof Leap.InteractionBox.prototype
   */
  this.depth = data.size[2];
}

/**
 * Converts a position defined by normalized InteractionBox coordinates
 * into device coordinates in millimeters.
 *
 * This function performs the inverse of normalizePoint().
 *
 * @method denormalizePoint
 * @memberof Leap.InteractionBox.prototype
 * @param {Leap.Vector} normalizedPosition The input position in InteractionBox coordinates.
 * @returns {Leap.Vector} The corresponding denormalized position in device coordinates.
 */
InteractionBox.prototype.denormalizePoint = function(normalizedPosition) {
  return vec3.fromValues(
    (normalizedPosition[0] - 0.5) * this.size[0] + this.center[0],
    (normalizedPosition[1] - 0.5) * this.size[1] + this.center[1],
    (normalizedPosition[2] - 0.5) * this.size[2] + this.center[2]
  );
}

/**
 * Normalizes the coordinates of a point using the interaction box.
 *
 * Coordinates from the Leap Motion frame of reference (millimeters) are
 * converted to a range of [0..1] such that the minimum value of the
 * InteractionBox maps to 0 and the maximum value of the InteractionBox maps to 1.
 *
 * @method normalizePoint
 * @memberof Leap.InteractionBox.prototype
 * @param {Leap.Vector} position The input position in device coordinates.
 * @param {Boolean} clamp Whether or not to limit the output value to the range [0,1]
 * when the input position is outside the InteractionBox. Defaults to true.
 * @returns {Leap.Vector} The normalized position.
 */
InteractionBox.prototype.normalizePoint = function(position, clamp) {
  var vec = vec3.fromValues(
    ((position[0] - this.center[0]) / this.size[0]) + 0.5,
    ((position[1] - this.center[1]) / this.size[1]) + 0.5,
    ((position[2] - this.center[2]) / this.size[2]) + 0.5
  );

  if (clamp) {
    vec[0] = Math.min(Math.max(vec[0], 0), 1);
    vec[1] = Math.min(Math.max(vec[1], 0), 1);
    vec[2] = Math.min(Math.max(vec[2], 0), 1);
  }
  return vec;
}

/**
 * Writes a brief, human readable description of the InteractionBox object.
 *
 * @method toString
 * @memberof Leap.InteractionBox.prototype
 * @returns {String} A description of the InteractionBox object as a string.
 */
InteractionBox.prototype.toString = function() {
  return "InteractionBox [ width:" + this.width + " | height:" + this.height + " | depth:" + this.depth + " ]";
}

/**
 * An invalid InteractionBox object.
 *
 * You can use this InteractionBox instance in comparisons testing
 * whether a given InteractionBox instance is valid or invalid. (You can also use the
 * InteractionBox.valid property.)
 *
 * @static
 * @type {Leap.InteractionBox}
 * @name Invalid
 * @memberof Leap.InteractionBox
 */
InteractionBox.Invalid = { valid: false };
</code></pre>
        </article>
    </section>




</div>
<div id="pointable-js" class="doc-section">
    
    <h2 class="page-title">Source: pointable.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var glMatrix = require("gl-matrix")
  , vec3 = glMatrix.vec3;

/**
 * Constructs a Pointable object.
 *
 * An uninitialized pointable is considered invalid.
 * Get valid Pointable objects from a Frame or a Hand object.
 *
 * @class Pointable
 * @memberof Leap
 * @classdesc
 * The Pointable class reports the physical characteristics of a detected
 * finger or tool.
 *
 * Both fingers and tools are classified as Pointable objects. Use the
 * Pointable.tool property to determine whether a Pointable object represents a
 * tool or finger. The Leap classifies a detected entity as a tool when it is
 * thinner, straighter, and longer than a typical finger.
 *
 * Note that Pointable objects can be invalid, which means that they do not
 * contain valid tracking data and do not correspond to a physical entity.
 * Invalid Pointable objects can be the result of asking for a Pointable object
 * using an ID from an earlier frame when no Pointable objects with that ID
 * exist in the current frame. A Pointable object created from the Pointable
 * constructor is also invalid. Test for validity with the Pointable.valid
 * property.
 */
var Pointable = module.exports = function(data) {
  /**
   * Indicates whether this is a valid Pointable object.
   *
   * @member valid
   * @type {Boolean}
   * @memberof Leap.Pointable.prototype
   */
  this.valid = true;
  /**
   * A unique ID assigned to this Pointable object, whose value remains the
   * same across consecutive frames while the tracked finger or tool remains
   * visible. If tracking is lost (for example, when a finger is occluded by
   * another finger or when it is withdrawn from the Leap field of view), the
   * Leap may assign a new ID when it detects the entity in a future frame.
   *
   * Use the ID value with the pointable() functions defined for the
   * {@link Frame} and {@link Frame.Hand} classes to find this
   * Pointable object in future frames.
   *
   * @member id
   * @type {String}
   * @memberof Leap.Pointable.prototype
   */
  this.id = data.id;
  this.handId = data.handId;
  /**
   * The estimated length of the finger or tool in millimeters.
   *
   * The reported length is the visible length of the finger or tool from the
   * hand to tip. If the length isn't known, then a value of 0 is returned.
   *
   * @member length
   * @type {number}
   * @memberof Leap.Pointable.prototype
   */
  this.length = data.length;
  /**
   * Whether or not the Pointable is believed to be a tool.
   * Tools are generally longer, thinner, and straighter than fingers.
   *
   * If tool is false, then this Pointable must be a finger.
   *
   * @member tool
   * @type {Boolean}
   * @memberof Leap.Pointable.prototype
   */
  this.tool = data.tool;
  /**
   * The estimated width of the tool in millimeters.
   *
   * The reported width is the average width of the visible portion of the
   * tool from the hand to the tip. If the width isn't known,
   * then a value of 0 is returned.
   *
   * Pointable objects representing fingers do not have a width property.
   *
   * @member width
   * @type {number}
   * @memberof Leap.Pointable.prototype
   */
  this.width = data.width;
  /**
   * The direction in which this finger or tool is pointing.
   *
   * The direction is expressed as a unit vector pointing in the same
   * direction as the tip.
   *
   * ![Finger](images/Leap_Finger_Model.png)
   * @member direction
   * @type {number[]}
   * @memberof Leap.Pointable.prototype
   */
  this.direction = data.direction;
  /**
   * The tip position in millimeters from the Leap origin.
   * Stabilized
   *
   * @member stabilizedTipPosition
   * @type {Leap.Vector}
   * @memberof Leap.Pointable.prototype
   */
  this.stabilizedTipPosition = data.stabilizedTipPosition;
  /**
   * The tip position in millimeters from the Leap origin.
   *
   * @member tipPosition
   * @type {number[]}
   * @memberof Leap.Pointable.prototype
   */
  this.tipPosition = data.tipPosition;
  /**
   * The rate of change of the tip position in millimeters/second.
   *
   * @member tipVelocity
   * @type {number[]}
   * @memberof Leap.Pointable.prototype
   */
  this.tipVelocity = data.tipVelocity;
  /**
   * Human readable string describing the 'Touch Zone' of this pointable
   *
   * @member Pointable.prototype.touchZone {String}
   */
  this.touchZone = data.touchZone;
  /**
   * Distance from 'Touch Plane'
   *
   * @member Pointable.prototype.touchDistance {number}
   */
  this.touchDistance = data.touchDistance;

  /**
   * Time the pointable has been visible in seconds.
   *
   * @member Pointable.prototype.timeVisible {float}
   */
  this.timeVisible = data.timeVisible;
}

/**
 * A string containing a brief, human readable description of the Pointable
 * object.
 *
 * @method toString
 * @memberof Leap.Pointable.prototype
 * @returns {String} A description of the Pointable object as a string.
 */
Pointable.prototype.toString = function() {
  if(this.tool == true){
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | with:" + this.width + "mm | direction:" + this.direction + ' ]';
  } else {
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | direction: " + this.direction + ' ]';
  }
}

/**
 * An invalid Pointable object.
 *
 * You can use this Pointable instance in comparisons testing
 * whether a given Pointable instance is valid or invalid. (You can also use the
 * Pointable.valid property.)

 * @static
 * @type {Leap.Pointable}
 * @name Invalid
 * @memberof Leap.Pointable
 */
Pointable.Invalid = { valid: false };
</code></pre>
        </article>
    </section>




</div>
<div id="controller-js" class="doc-section">
    
    <h2 class="page-title">Source: controller.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var Frame = require('./frame')
  , CircularBuffer = require("./circular_buffer")
  , Pipeline = require("./pipeline")
  , EventEmitter = require('events').EventEmitter
  , gestureListener = require('./gesture').gestureListener
  , _ = require('underscore');

/**
 * Constructs a Controller object.
 *
 * When creating a Controller object, you may optionally pass in options
 * to set the host , set the port, enable gestures, or select the frame event type.
 *
 * ```javascript
 * var controller = new Leap.Controller({
 *   host: '127.0.0.1',
 *   port: 6437,
 *   enableGestures: true,
 *   frameEventName: 'animationFrame'
 * });
 * ```
 *
 * @class Controller
 * @memberof Leap
 * @classdesc
 * The Controller class is your main interface to the Leap Motion Controller.
 *
 * Create an instance of this Controller class to access frames of tracking data
 * and configuration information. Frame data can be polled at any time using the
 * [Controller.frame]{@link Leap.Controller#frame}() function. Call frame() or frame(0) to get the most recent
 * frame. Set the history parameter to a positive integer to access previous frames.
 * A controller stores up to 60 frames in its frame history.
 *
 * Polling is an appropriate strategy for applications which already have an
 * intrinsic update loop, such as a game.
 */
var Controller = module.exports = function(opts) {
  var inNode = typeof(process) !== 'undefined' &amp;&amp; process.title === 'node';

  opts = _.defaults(opts || {}, {
    inNode: inNode
  });

  this.inNode = opts.inNode;

  opts = _.defaults(opts || {}, {
    frameEventName: this.useAnimationLoop() ? 'animationFrame' : 'deviceFrame',
    supressAnimationLoop: false,
  });

  this.supressAnimationLoop = opts.supressAnimationLoop;
  this.frameEventName = opts.frameEventName;
  this.history = new CircularBuffer(200);
  this.lastFrame = Frame.Invalid;
  this.lastValidFrame = Frame.Invalid;
  this.lastConnectionFrame = Frame.Invalid;
  this.accumulatedGestures = [];
  if (opts.connectionType === undefined) {
    this.connectionType = (this.inBrowser() ? require('./connection') : require('./node_connection'));
  } else {
    this.connectionType = opts.connectionType;
  }
  this.connection = new this.connectionType(opts);
  this.setupConnectionEvents();
}

Controller.prototype.gesture = function(type, cb) {
  var creator = gestureListener(this, type);
  if (cb !== undefined) {
    creator.stop(cb);
  }
  return creator;
}

Controller.prototype.inBrowser = function() {
  return !this.inNode;
}

Controller.prototype.useAnimationLoop = function() {
  return this.inBrowser() &amp;&amp; typeof(chrome) === "undefined";
}

Controller.prototype.connect = function() {
  var controller = this;
  if (this.connection.connect() &amp;&amp; this.inBrowser() &amp;&amp; !controller.supressAnimationLoop) {
    var callback = function() {
      controller.emit('animationFrame', controller.lastConnectionFrame);
      window.requestAnimFrame(callback);
    }
    window.requestAnimFrame(callback);
  }
}

Controller.prototype.disconnect = function() {
  this.connection.disconnect();
}

/**
 * Returns a frame of tracking data from the Leap.
 *
 * Use the optional history parameter to specify which frame to retrieve.
 * Call frame() or frame(0) to access the most recent frame; call frame(1) to
 * access the previous frame, and so on. If you use a history value greater
 * than the number of stored frames, then the controller returns an invalid frame.
 *
 * @method frame
 * @memberof Leap.Controller.prototype
 * @param {number} history The age of the frame to return, counting backwards from
 * the most recent frame (0) into the past and up to the maximum age (59).
 * @returns {Leap.Frame} The specified frame; or, if no history
 * parameter is specified, the newest frame. If a frame is not available at
 * the specified history position, an invalid Frame is returned.
 */
Controller.prototype.frame = function(num) {
  return this.history.get(num) || Frame.Invalid;
}

Controller.prototype.loop = function(callback) {
  switch (callback.length) {
    case 1:
      this.on(this.frameEventName, callback);
      break;
    case 2:
      var controller = this;
      var scheduler = null;
      var immediateRunnerCallback = function(frame) {
        callback(frame, function() {
          if (controller.lastFrame != frame) {
            immediateRunnerCallback(controller.lastFrame);
          } else {
            controller.once(controller.frameEventName, immediateRunnerCallback);
          }
        });
      }
      this.once(this.frameEventName, immediateRunnerCallback);
      break;
  }
  this.connect();
}

Controller.prototype.addStep = function(step) {
  if (!this.pipeline) this.pipeline = new Pipeline(this);
  this.pipeline.addStep(step);
}

Controller.prototype.processFrame = function(frame) {
  if (frame.gestures) {
    this.accumulatedGestures = this.accumulatedGestures.concat(frame.gestures);
  }
  if (this.pipeline) {
    frame = this.pipeline.run(frame);
    if (!frame) frame = Frame.Invalid;
  }
  this.lastConnectionFrame = frame;
  this.emit('deviceFrame', frame);
}

Controller.prototype.processFinishedFrame = function(frame) {
  this.lastFrame = frame;
  if (frame.valid) {
    this.lastValidFrame = frame;
  }
  frame.controller = this;
  frame.historyIdx = this.history.push(frame);
  if (frame.gestures) {
    frame.gestures = this.accumulatedGestures;
    this.accumulatedGestures = [];
    for (var gestureIdx = 0; gestureIdx != frame.gestures.length; gestureIdx++) {
      this.emit("gesture", frame.gestures[gestureIdx], frame);
    }
  }
  this.emit('frame', frame);
}

Controller.prototype.setupConnectionEvents = function() {
  var controller = this;
  this.connection.on('frame', function(frame) {
    controller.processFrame(frame);
  });
  this.on(this.frameEventName, function(frame) {
    controller.processFinishedFrame(frame);
  });

  // Delegate connection events
  this.connection.on('disconnect', function() {
    clearTimeout(controller.deviceReadyTimer);
    delete controller.deviceReadyTimer;
    controller.emit('disconnect');
  });
  this.connection.on('ready', function() { controller.emit('ready'); });
  this.connection.on('connect', function() { controller.emit('connect'); });
  this.connection.on('focus', function() { controller.emit('focus') });
  this.connection.on('blur', function() { controller.emit('blur') });
  this.connection.on('protocol', function(protocol) { controller.emit('protocol', protocol); });
  this.connection.on('deviceConnect', function(evt) { controller.emit(evt.state ? 'deviceConnected' : 'deviceDisconnected'); });
}

_.extend(Controller.prototype, EventEmitter.prototype);
</code></pre>
        </article>
    </section>




</div>
<div id="leap-gesture" class="doc-section">
    
    <h2 class="page-title">Class: Gesture</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    Gesture
    </h3>
    
        <div class="class-description">The Gesture class represents a recognized movement by the user.

The Leap watches the activity within its field of view for certain movement
patterns typical of a user gesture or command. For example, a movement from side to
side with the hand can indicate a swipe gesture, while a finger poking forward
can indicate a screen tap gesture.

When the Leap recognizes a gesture, it assigns an ID and adds a
Gesture object to the frame gesture list. For continuous gestures, which
occur over many frames, the Leap updates the gesture by adding
a Gesture object having the same ID and updated properties in each
subsequent frame.

**Important:** Recognition for each type of gesture must be enabled;
otherwise **no gestures are recognized or reported**.

Subclasses of Gesture define the properties for the specific movement patterns
recognized by the Leap.

The Gesture subclasses for include:

* CircleGesture -- A circular movement by a finger.
* SwipeGesture -- A straight line movement by the hand with fingers extended.
* ScreenTapGesture -- A forward tapping movement by a finger.
* KeyTapGesture -- A downward tapping movement by a finger.

Circle and swipe gestures are continuous and these objects can have a
state of start, update, and stop.

The screen tap gesture is a discrete gesture. The Leap only creates a single
ScreenTapGesture object appears for each tap and it always has a stop state.

Get valid Gesture instances from a Frame object. You can get a list of gestures
from the Frame gestures array. You can also use the Frame gesture() method
to find a gesture in the current frame using an ID value obtained in a
previous frame.

Gesture objects can be invalid. For example, when you get a gesture by ID
using Frame.gesture(), and there is no gesture with that ID in the current
frame, then gesture() returns an Invalid Gesture object (rather than a null
value). Always check object validity in situations where a gesture might be
invalid.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="Gesture">
<span class="type-signature">&lt;virtual&gt; </span>new Gesture<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a new Gesture object.

An uninitialized Gesture object is considered invalid. Get valid instances
of the Gesture class, which will be one of the Gesture subclasses, from a
Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 6</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="duration">
<span class="type-signature"></span>duration<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The elapsed duration of the recognized movement up to the
frame containing this Gesture object, in microseconds.

The duration reported for the first Gesture in the sequence (with the
start state) will typically be a small positive number since
the movement must progress far enough for the Leap to recognize it as
an intentional gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 110</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="handIds">
<span class="type-signature"></span>handIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of hands associated with this Gesture, if any.

If no hands are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 90</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

All Gesture objects belonging to the same recognized movement share the
same ID value. Use the ID value with the Frame::gesture() method to
find updates related to this Gesture object in subsequent frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 78</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointableIds">
<span class="type-signature"></span>pointableIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers and tools associated with this Gesture, if any.

If no Pointable objects are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 100</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="state">
<span class="type-signature"></span>state<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

Recognized movements occur over time and have a beginning, a middle,
and an end. The 'state()' attribute reports where in that sequence this
Gesture object falls.

Possible values for the state field are:

* start
* update
* stop
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 124</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="type">
<span class="type-signature"></span>type<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture type.

Possible values for the type field are:

* circle
* swipe
* screenTap
* keyTap
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 142</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-keytapgesture" class="doc-section">
    
    <h2 class="page-title">Class: KeyTapGesture</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    KeyTapGesture
    </h3>
    
        <div class="class-description">The KeyTapGesture class represents a tapping gesture by a finger or tool.

A key tap gesture is recognized when the tip of a finger rotates down toward the
palm and then springs back to approximately the original postion, as if
tapping. The tapping finger must pause briefly before beginning the tap.

![KeyTap](images/Leap_Gesture_Tap.png)

Key tap gestures are discrete. The KeyTapGesture object representing a tap always
has the state, STATE_STOP. Only one KeyTapGesture object is created for each
key tap gesture recognized.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="KeyTapGesture">
<span class="type-signature"></span>new KeyTapGesture<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a new KeyTapGesture object.

An uninitialized KeyTapGesture object is considered invalid. Get valid instances
of the KeyTapGesture class from a Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 436</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
        <h4 class="subsection-title">Extends</h4>
        
        <ul>
            <li><span>Leap.Gesture</span></li>
        </ul>
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="direction">
<span class="type-signature"></span>direction<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The direction of finger tip motion.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 467</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="duration">
<span class="type-signature"></span>duration<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The elapsed duration of the recognized movement up to the
frame containing this Gesture object, in microseconds.

The duration reported for the first Gesture in the sequence (with the
start state) will typically be a small positive number since
the movement must progress far enough for the Leap to recognize it as
an intentional gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#duration</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 110</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="handIds">
<span class="type-signature"></span>handIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of hands associated with this Gesture, if any.

If no hands are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#handIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 90</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

All Gesture objects belonging to the same recognized movement share the
same ID value. Use the ID value with the Frame::gesture() method to
find updates related to this Gesture object in subsequent frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#id</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 78</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointableIds">
<span class="type-signature"></span>pointableIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers and tools associated with this Gesture, if any.

If no Pointable objects are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#pointableIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 100</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="position">
<span class="type-signature"></span>position<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The position where the key tap is registered.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 459</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="progress">
<span class="type-signature"></span>progress<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The progess value is always 1.0 for a key tap gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 475</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="state">
<span class="type-signature"></span>state<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

Recognized movements occur over time and have a beginning, a middle,
and an end. The 'state()' attribute reports where in that sequence this
Gesture object falls.

Possible values for the state field are:

* start
* update
* stop
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#state</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 124</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="type">
<span class="type-signature"></span>type<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture type.

Possible values for the type field are:

* circle
* swipe
* screenTap
* keyTap
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#type</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 142</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-screentapgesture" class="doc-section">
    
    <h2 class="page-title">Class: ScreenTapGesture</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    ScreenTapGesture
    </h3>
    
        <div class="class-description">The ScreenTapGesture class represents a tapping gesture by a finger or tool.

A screen tap gesture is recognized when the tip of a finger pokes forward
and then springs back to approximately the original postion, as if
tapping a vertical screen. The tapping finger must pause briefly before beginning the tap.

![ScreenTap](images/Leap_Gesture_Tap2.png)

ScreenTap gestures are discrete. The ScreenTapGesture object representing a tap always
has the state, STATE_STOP. Only one ScreenTapGesture object is created for each
screen tap gesture recognized.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="ScreenTapGesture">
<span class="type-signature"></span>new ScreenTapGesture<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a new ScreenTapGesture object.

An uninitialized ScreenTapGesture object is considered invalid. Get valid instances
of the ScreenTapGesture class from a Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 383</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
        <h4 class="subsection-title">Extends</h4>
        
        <ul>
            <li><span>Leap.Gesture</span></li>
        </ul>
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="direction">
<span class="type-signature"></span>direction<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The direction of finger tip motion.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 414</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="duration">
<span class="type-signature"></span>duration<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The elapsed duration of the recognized movement up to the
frame containing this Gesture object, in microseconds.

The duration reported for the first Gesture in the sequence (with the
start state) will typically be a small positive number since
the movement must progress far enough for the Leap to recognize it as
an intentional gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#duration</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 110</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="handIds">
<span class="type-signature"></span>handIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of hands associated with this Gesture, if any.

If no hands are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#handIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 90</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

All Gesture objects belonging to the same recognized movement share the
same ID value. Use the ID value with the Frame::gesture() method to
find updates related to this Gesture object in subsequent frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#id</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 78</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointableIds">
<span class="type-signature"></span>pointableIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers and tools associated with this Gesture, if any.

If no Pointable objects are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#pointableIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 100</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="position">
<span class="type-signature"></span>position<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The position where the screen tap is registered.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 406</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="progress">
<span class="type-signature"></span>progress<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The progess value is always 1.0 for a screen tap gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 422</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="state">
<span class="type-signature"></span>state<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

Recognized movements occur over time and have a beginning, a middle,
and an end. The 'state()' attribute reports where in that sequence this
Gesture object falls.

Possible values for the state field are:

* start
* update
* stop
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#state</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 124</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="type">
<span class="type-signature"></span>type<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture type.

Possible values for the type field are:

* circle
* swipe
* screenTap
* keyTap
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#type</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 142</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-swipegesture" class="doc-section">
    
    <h2 class="page-title">Class: SwipeGesture</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    SwipeGesture
    </h3>
    
        <div class="class-description">The SwipeGesture class represents a swiping motion of a finger or tool.

![SwipeGesture](images/Leap_Gesture_Swipe.png)

Swipe gestures are continuous.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="SwipeGesture">
<span class="type-signature"></span>new SwipeGesture<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a new SwipeGesture object.

An uninitialized SwipeGesture object is considered invalid. Get valid instances
of the SwipeGesture class from a Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 320</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
        <h4 class="subsection-title">Extends</h4>
        
        <ul>
            <li><span>Leap.Gesture</span></li>
        </ul>
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="direction">
<span class="type-signature"></span>direction<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The unit direction vector parallel to the swipe motion.

You can compare the components of the vector to classify the swipe as
appropriate for your application. For example, if you are using swipes
for two dimensional scrolling, you can compare the x and y values to
determine if the swipe is primarily horizontal or vertical.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 355</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="duration">
<span class="type-signature"></span>duration<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The elapsed duration of the recognized movement up to the
frame containing this Gesture object, in microseconds.

The duration reported for the first Gesture in the sequence (with the
start state) will typically be a small positive number since
the movement must progress far enough for the Leap to recognize it as
an intentional gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#duration</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 110</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="handIds">
<span class="type-signature"></span>handIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of hands associated with this Gesture, if any.

If no hands are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#handIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 90</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

All Gesture objects belonging to the same recognized movement share the
same ID value. Use the ID value with the Frame::gesture() method to
find updates related to this Gesture object in subsequent frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#id</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 78</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointableIds">
<span class="type-signature"></span>pointableIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers and tools associated with this Gesture, if any.

If no Pointable objects are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#pointableIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 100</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="position">
<span class="type-signature"></span>position<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The current swipe position within the Leap frame of
reference, in mm.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 346</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="speed">
<span class="type-signature"></span>speed<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The speed of the finger performing the swipe gesture in
millimeters per second.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 368</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="startPosition">
<span class="type-signature"></span>startPosition<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The starting position within the Leap frame of
reference, in mm.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 337</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="state">
<span class="type-signature"></span>state<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

Recognized movements occur over time and have a beginning, a middle,
and an end. The 'state()' attribute reports where in that sequence this
Gesture object falls.

Possible values for the state field are:

* start
* update
* stop
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#state</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 124</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="type">
<span class="type-signature"></span>type<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture type.

Possible values for the type field are:

* circle
* swipe
* screenTap
* keyTap
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#type</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 142</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-interactionbox" class="doc-section">
    
    <h2 class="page-title">Class: InteractionBox</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    InteractionBox
    </h3>
    
        <div class="class-description">The InteractionBox class represents a box-shaped region completely within
the field of view of the Leap Motion controller.

The interaction box is an axis-aligned rectangular prism and provides
normalized coordinates for hands, fingers, and tools within this box.
The InteractionBox class can make it easier to map positions in the
Leap Motion coordinate system to 2D or 3D coordinate systems used
for application drawing.

The InteractionBox region is defined by a center and dimensions along the x, y, and z axes.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="InteractionBox">
<span class="type-signature"></span>new InteractionBox<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a InteractionBox object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 4</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="Invalid">
<span class="type-signature">&lt;static&gt; </span>Invalid<span class="type-signature"> :<span>Leap.InteractionBox</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        An invalid InteractionBox object.

You can use this InteractionBox instance in comparisons testing
whether a given InteractionBox instance is valid or invalid. (You can also use the
InteractionBox.valid property.)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.InteractionBox</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 126</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="center">
<span class="type-signature"></span>center<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The center of the InteractionBox in device coordinates (millimeters).
This point is equidistant from all sides of the box.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 30</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="depth">
<span class="type-signature"></span>depth<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The depth of the InteractionBox in millimeters, measured along the z-axis.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 57</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="height">
<span class="type-signature"></span>height<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The height of the InteractionBox in millimeters, measured along the y-axis.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 49</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="valid">
<span class="type-signature"></span>valid<span class="type-signature"> :Boolean</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        Indicates whether this is a valid InteractionBox object.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Boolean</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 22</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="width">
<span class="type-signature"></span>width<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The width of the InteractionBox in millimeters, measured along the x-axis.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 41</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="denormalizePoint">
<span class="type-signature"></span>denormalizePoint<span class="signature">(normalizedPosition)</span><span class="type-signature"> â†’ {Leap.Vector}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Converts a position defined by normalized InteractionBox coordinates
into device coordinates in millimeters.

This function performs the inverse of normalizePoint().
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>normalizedPosition</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">Leap.Vector</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The input position in InteractionBox coordinates.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 67</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The corresponding denormalized position in device coordinates.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">Leap.Vector</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="normalizePoint">
<span class="type-signature"></span>normalizePoint<span class="signature">(position, clamp)</span><span class="type-signature"> â†’ {Leap.Vector}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Normalizes the coordinates of a point using the interaction box.

Coordinates from the Leap Motion frame of reference (millimeters) are
converted to a range of [0..1] such that the minimum value of the
InteractionBox maps to 0 and the maximum value of the InteractionBox maps to 1.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>position</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">Leap.Vector</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The input position in device coordinates.</td>
        </tr>
	
	
	
        <tr>
            
                <td class="name"><code>clamp</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>
            
            
            
            
            
            <td class="description last">Whether or not to limit the output value to the range [0,1]
when the input position is outside the InteractionBox. Defaults to true.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 86</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The normalized position.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">Leap.Vector</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="toString">
<span class="type-signature"></span>toString<span class="signature">()</span><span class="type-signature"> â†’ {String}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Writes a brief, human readable description of the InteractionBox object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>interaction_box.js</span>, <span>line 115</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A description of the InteractionBox object as a string.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">String</span>


	</dd>
</dl>

        
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-pointable" class="doc-section">
    
    <h2 class="page-title">Class: Pointable</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    Pointable
    </h3>
    
        <div class="class-description">The Pointable class reports the physical characteristics of a detected
finger or tool.

Both fingers and tools are classified as Pointable objects. Use the
Pointable.tool property to determine whether a Pointable object represents a
tool or finger. The Leap classifies a detected entity as a tool when it is
thinner, straighter, and longer than a typical finger.

Note that Pointable objects can be invalid, which means that they do not
contain valid tracking data and do not correspond to a physical entity.
Invalid Pointable objects can be the result of asking for a Pointable object
using an ID from an earlier frame when no Pointable objects with that ID
exist in the current frame. A Pointable object created from the Pointable
constructor is also invalid. Test for validity with the Pointable.valid
property.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="Pointable">
<span class="type-signature"></span>new Pointable<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a Pointable object.

An uninitialized pointable is considered invalid.
Get valid Pointable objects from a Frame or a Hand object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 4</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="Invalid">
<span class="type-signature">&lt;static&gt; </span>Invalid<span class="type-signature"> :<span>Leap.Pointable</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        An invalid Pointable object.

You can use this Pointable instance in comparisons testing
whether a given Pointable instance is valid or invalid. (You can also use the
Pointable.valid property.)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Pointable</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 165</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="direction">
<span class="type-signature"></span>direction<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The direction in which this finger or tool is pointing.

The direction is expressed as a unit vector pointing in the same
direction as the tip.

![Finger](images/Leap_Finger_Model.png)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 91</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        A unique ID assigned to this Pointable object, whose value remains the
same across consecutive frames while the tracked finger or tool remains
visible. If tracking is lost (for example, when a finger is occluded by
another finger or when it is withdrawn from the Leap field of view), the
Leap may assign a new ID when it detects the entity in a future frame.

Use the ID value with the pointable() functions defined for the
Frame and {@link Frame.Hand} classes to find this
Pointable object in future frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 38</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="length">
<span class="type-signature"></span>length<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The estimated length of the finger or tool in millimeters.

The reported length is the visible length of the finger or tool from the
hand to tip. If the length isn't known, then a value of 0 is returned.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 55</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="stabilizedTipPosition">
<span class="type-signature"></span>stabilizedTipPosition<span class="type-signature"> :Leap.Vector</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The tip position in millimeters from the Leap origin.
Stabilized
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Leap.Vector</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 103</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tipPosition">
<span class="type-signature"></span>tipPosition<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The tip position in millimeters from the Leap origin.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 112</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tipVelocity">
<span class="type-signature"></span>tipVelocity<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The rate of change of the tip position in millimeters/second.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 120</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tool">
<span class="type-signature"></span>tool<span class="type-signature"> :Boolean</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        Whether or not the Pointable is believed to be a tool.
Tools are generally longer, thinner, and straighter than fingers.

If tool is false, then this Pointable must be a finger.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Boolean</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 66</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="valid">
<span class="type-signature"></span>valid<span class="type-signature"> :Boolean</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        Indicates whether this is a valid Pointable object.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Boolean</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 30</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="width">
<span class="type-signature"></span>width<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The estimated width of the tool in millimeters.

The reported width is the average width of the visible portion of the
tool from the hand to the tip. If the width isn't known,
then a value of 0 is returned.

Pointable objects representing fingers do not have a width property.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 77</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="toString">
<span class="type-signature"></span>toString<span class="signature">()</span><span class="type-signature"> â†’ {String}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        A string containing a brief, human readable description of the Pointable
object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>pointable.js</span>, <span>line 149</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A description of the Pointable object as a string.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">String</span>


	</dd>
</dl>

        
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-circlegesture" class="doc-section">
    
    <h2 class="page-title">Class: CircleGesture</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    CircleGesture
    </h3>
    
        <div class="class-description">The CircleGesture classes represents a circular finger movement.

A circle movement is recognized when the tip of a finger draws a circle
within the Leap field of view.

![CircleGesture](images/Leap_Gesture_Circle.png)

Circle gestures are continuous. The CircleGesture objects for the gesture have
three possible states:

* start -- The circle gesture has just started. The movement has
 progressed far enough for the recognizer to classify it as a circle.
* update -- The circle gesture is continuing.
* stop -- The circle gesture is finished.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="CircleGesture">
<span class="type-signature"></span>new CircleGesture<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a new CircleGesture object.

An uninitialized CircleGesture object is considered invalid. Get valid instances
of the CircleGesture class from a Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 229</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
        <h4 class="subsection-title">Extends</h4>
        
        <ul>
            <li><span>Leap.Gesture</span></li>
        </ul>
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="center">
<span class="type-signature"></span>center<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The center point of the circle within the Leap frame of reference.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 255</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="duration">
<span class="type-signature"></span>duration<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The elapsed duration of the recognized movement up to the
frame containing this Gesture object, in microseconds.

The duration reported for the first Gesture in the sequence (with the
start state) will typically be a small positive number since
the movement must progress far enough for the Leap to recognize it as
an intentional gesture.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#duration</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 110</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="handIds">
<span class="type-signature"></span>handIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of hands associated with this Gesture, if any.

If no hands are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#handIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 90</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

All Gesture objects belonging to the same recognized movement share the
same ID value. Use the ID value with the Frame::gesture() method to
find updates related to this Gesture object in subsequent frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#id</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 78</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="normal">
<span class="type-signature"></span>normal<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The normal vector for the circle being traced.

If you draw the circle clockwise, the normal vector points in the same
general direction as the pointable object drawing the circle. If you draw
the circle counterclockwise, the normal points back toward the
pointable. If the angle between the normal and the pointable object
drawing the circle is less than 90 degrees, then the circle is clockwise.

```javascript
   var clockwiseness;
   if (circle.pointable.direction.angleTo(circle.normal) 
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 263</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    


        
            
<dt>
    <h5 class="name" id="pointableIds">
<span class="type-signature"></span>pointableIds<span class="type-signature"> :Array</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers and tools associated with this Gesture, if any.

If no Pointable objects are related to this gesture, the list is empty.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Array</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#pointableIds</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 100</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="progress">
<span class="type-signature"></span>progress<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The number of times the finger tip has traversed the circle.

Progress is reported as a positive number of the number. For example,
a progress value of .5 indicates that the finger has gone halfway
around, while a value of 3 indicates that the finger has gone around
the the circle three times.

Progress starts where the circle gesture began. Since the circle
must be partially formed before the Leap can recognize it, progress
will be greater than zero when a circle gesture first appears in the
frame.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 288</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="radius">
<span class="type-signature"></span>radius<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The radius of the circle in mm.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 306</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="state">
<span class="type-signature"></span>state<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture ID.

Recognized movements occur over time and have a beginning, a middle,
and an end. The 'state()' attribute reports where in that sequence this
Gesture object falls.

Possible values for the state field are:

* start
* update
* stop
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#state</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 124</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="type">
<span class="type-signature"></span>type<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The gesture type.

Possible values for the type field are:

* circle
* swipe
* screenTap
* keyTap
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    <dt class="inherited-from">Inherited From:</dt>
    <dd class="inherited-from"><ul class="dummy"><li>
        <span>Leap.Gesture#type</span>
    </li></ul></dd>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>gesture.js</span>, <span>line 142</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
    
    
    
    
    
    
    


  




</div>

<nav>
    <h3><span>Index</span></h3>
<h4>Classes</h4>
<ul>
<li><span>CircleGesture</span></li>
<li><span>Controller</span></li>
<li><span>Frame</span></li>
<li><span>Gesture</span></li>
<li><span>Hand</span></li>
<li><span>InteractionBox</span></li>
<li><span>KeyTapGesture</span></li>
<li><span>Pointable</span></li>
<li><span>ScreenTapGesture</span></li>
<li><span>SwipeGesture</span></li>
</ul>
<h4>Namespaces</h4>
<ul><li><span>Leap</span></li></ul>
</nav>

<br clear="both">

<footer>
    Documentation generated by <span>JSDoc 3.2.0-dev</span> on Fri Jul 19 2013 01:36:58 GMT-0700 (PDT)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</dd>
</dl></article></section>
</div>
<div id="hand-js" class="doc-section">
    
    <h2 class="page-title">Source: hand.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var Pointable = require("./pointable")
  , glMatrix = require("gl-matrix")
  , mat3 = glMatrix.mat3
  , vec3 = glMatrix.vec3
  , _ = require("underscore");

/**
 * Constructs a Hand object.
 *
 * An uninitialized hand is considered invalid.
 * Get valid Hand objects from a Frame object.
 * @class Hand
 * @memberof Leap
 * @classdesc
 * The Hand class reports the physical characteristics of a detected hand.
 *
 * Hand tracking data includes a palm position and velocity; vectors for
 * the palm normal and direction to the fingers; properties of a sphere fit
 * to the hand; and lists of the attached fingers and tools.
 *
 * Note that Hand objects can be invalid, which means that they do not contain
 * valid tracking data and do not correspond to a physical entity. Invalid Hand
 * objects can be the result of asking for a Hand object using an ID from an
 * earlier frame when no Hand objects with that ID exist in the current frame.
 * A Hand object created from the Hand constructor is also invalid.
 * Test for validity with the [Hand.valid]{@link Leap.Hand#valid} property.
 */
var Hand = module.exports = function(data) {
  /**
   * A unique ID assigned to this Hand object, whose value remains the same
   * across consecutive frames while the tracked hand remains visible. If
   * tracking is lost (for example, when a hand is occluded by another hand
   * or when it is withdrawn from or reaches the edge of the Leap field of view),
   * the Leap may assign a new ID when it detects the hand in a future frame.
   *
   * Use the ID value with the {@link Frame.hand}() function to find this
   * Hand object in future frames.
   *
   * @member id
   * @memberof Leap.Hand.prototype
   * @type {String}
   */
  this.id = data.id;
  /**
   * The center position of the palm in millimeters from the Leap origin.
   * @member palmPosition
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
  this.palmPosition = data.palmPosition;
  /**
   * The direction from the palm position toward the fingers.
   *
   * The direction is expressed as a unit vector pointing in the same
   * direction as the directed line from the palm position to the fingers.
   *
   * @member direction
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
  this.direction = data.direction;
  /**
   * The rate of change of the palm position in millimeters/second.
   *
   * @member palmVeclocity
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
  this.palmVelocity = data.palmVelocity;
  /**
   * The normal vector to the palm. If your hand is flat, this vector will
   * point downward, or "out" of the front surface of your palm.
   *
   * ![Palm Vectors](images/Leap_Palm_Vectors.png)
   *
   * The direction is expressed as a unit vector pointing in the same
   * direction as the palm normal (that is, a vector orthogonal to the palm).
   * @member palmNormal
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
  this.palmNormal = data.palmNormal;
  /**
   * The center of a sphere fit to the curvature of this hand.
   *
   * This sphere is placed roughly as if the hand were holding a ball.
   *
   * ![Hand Ball](images/Leap_Hand_Ball.png)
   * @member sphereCenter
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
  this.sphereCenter = data.sphereCenter;
  /**
   * The radius of a sphere fit to the curvature of this hand, in millimeters.
   *
   * This sphere is placed roughly as if the hand were holding a ball. Thus the
   * size of the sphere decreases as the fingers are curled into a fist.
   *
   * @member sphereRadius
   * @memberof Leap.Hand.prototype
   * @type {number}
   */
  this.sphereRadius = data.sphereRadius;
  /**
   * Reports whether this is a valid Hand object.
   *
   * @member valid
   * @memberof Leap.Hand.prototype
   * @type {boolean}
   */
  this.valid = true;
  /**
   * The list of Pointable objects (fingers and tools) detected in this frame
   * that are associated with this hand, given in arbitrary order. The list
   * can be empty if no fingers or tools associated with this hand are detected.
   *
   * Use the {@link Pointable} tool property to determine
   * whether or not an item in the list represents a tool or finger.
   * You can also get only the tools using the Hand.tools[] list or
   * only the fingers using the Hand.fingers[] list.
   *
   * @member pointables[]
   * @memberof Leap.Hand.prototype
   * @type {Leap.Pointable[]}
   */
  this.pointables = [];
  /**
   * The list of fingers detected in this frame that are attached to
   * this hand, given in arbitrary order.
   *
   * The list can be empty if no fingers attached to this hand are detected.
   *
   * @member fingers[]
   * @memberof Leap.Hand.prototype
   * @type {Leap.Pointable[]}
   */
  this.fingers = [];
  /**
   * The list of tools detected in this frame that are held by this
   * hand, given in arbitrary order.
   *
   * The list can be empty if no tools held by this hand are detected.
   *
   * @member tools[]
   * @memberof Leap.Hand.prototype
   * @type {Leap.Pointable[]}
   */
  this.tools = [];
  this._translation = data.t;
  this._rotation = _.flatten(data.r);
  this._scaleFactor = data.s;

  /**
   * Time the hand has been visible in seconds.
   *
   * @member Hand.prototype.timeVisible {float}
   */
   this.timeVisible = data.timeVisible;

  /**
   * The palm position with stabalization
   * @member stabilizedPalmPosition
   * @memberof Leap.Hand.prototype
   * @type {number[]}
   */
   this.stabilizedPalmPosition = data.stabilizedPalmPosition;
}

/**
 * The finger with the specified ID attached to this hand.
 *
 * Use this function to retrieve a Pointable object representing a finger
 * attached to this hand using an ID value obtained from a previous frame.
 * This function always returns a Pointable object, but if no finger
 * with the specified ID is present, an invalid Pointable object is returned.
 *
 * Note that the ID values assigned to fingers persist across frames, but only
 * until tracking of a particular finger is lost. If tracking of a finger is
 * lost and subsequently regained, the new Finger object representing that
 * finger may have a different ID than that representing the finger in an
 * earlier frame.
 *
 * @method finger
 * @memberof Leap.Hand.prototype
 * @param {String} id The ID value of a finger from a previous frame.
 * @returns {Leap.Pointable} The Finger object with
 * the matching ID if one exists for this hand in this frame; otherwise, an
 * invalid Finger object is returned.
 */
Hand.prototype.finger = function(id) {
  var finger = this.frame.finger(id);
  return (finger &amp;&amp; finger.handId == this.id) ? finger : Pointable.Invalid;
}

/**
 * The angle of rotation around the rotation axis derived from the change in
 * orientation of this hand, and any associated fingers and tools, between the
 * current frame and the specified frame.
 *
 * The returned angle is expressed in radians measured clockwise around the
 * rotation axis (using the right-hand rule) between the start and end frames.
 * The value is always between 0 and pi radians (0 and 180 degrees).
 *
 * If a corresponding Hand object is not found in sinceFrame, or if either
 * this frame or sinceFrame are invalid Frame objects, then the angle of rotation is zero.
 *
 * @method rotationAngle
 * @memberof Leap.Hand.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @param {numnber[]} [axis] The axis to measure rotation around.
 * @returns {number} A positive value representing the heuristically determined
 * rotational change of the hand between the current frame and that specified in
 * the sinceFrame parameter.
 */
Hand.prototype.rotationAngle = function(sinceFrame, axis) {
  if (!this.valid || !sinceFrame.valid) return 0.0;
  var sinceHand = sinceFrame.hand(this.id);
  if(!sinceHand.valid) return 0.0;
  var rot = this.rotationMatrix(sinceFrame);
  var cs = (rot[0] + rot[4] + rot[8] - 1.0)*0.5
  var angle = Math.acos(cs);
  angle = isNaN(angle) ? 0.0 : angle;
  if (axis !== undefined) {
    var rotAxis = this.rotationAxis(sinceFrame);
    angle *= vec3.dot(rotAxis, vec3.normalize(vec3.create(), axis));
  }
  return angle;
}

/**
 * The axis of rotation derived from the change in orientation of this hand, and
 * any associated fingers and tools, between the current frame and the specified frame.
 *
 * The returned direction vector is normalized.
 *
 * If a corresponding Hand object is not found in sinceFrame, or if either
 * this frame or sinceFrame are invalid Frame objects, then this method returns a zero vector.
 *
 * @method rotationAxis
 * @memberof Leap.Hand.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @returns {number[]} A normalized direction Vector representing the axis of the heuristically determined
 * rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
 */
Hand.prototype.rotationAxis = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return vec3.create();
  var sinceHand = sinceFrame.hand(this.id);
  if (!sinceHand.valid) return vec3.create();
  return vec3.normalize(vec3.create(), [
    this._rotation[7] - sinceHand._rotation[5],
    this._rotation[2] - sinceHand._rotation[6],
    this._rotation[3] - sinceHand._rotation[1]
  ]);
}

/**
 * The transform matrix expressing the rotation derived from the change in
 * orientation of this hand, and any associated fingers and tools, between
 * the current frame and the specified frame.
 *
 * If a corresponding Hand object is not found in sinceFrame, or if either
 * this frame or sinceFrame are invalid Frame objects, then this method returns
 * an identity matrix.
 *
 * @method rotationMatrix
 * @memberof Leap.Hand.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @returns {number[]} A transformation Matrix containing the heuristically determined
 * rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
 */
Hand.prototype.rotationMatrix = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return mat3.create();
  var sinceHand = sinceFrame.hand(this.id);
  if(!sinceHand.valid) return mat3.create();
  var transpose = mat3.transpose(mat3.create(), this._rotation);
  var m = mat3.multiply(mat3.create(), sinceHand._rotation, transpose);
  return m;
}

/**
 * The scale factor derived from the hand's motion between the current frame and the specified frame.
 *
 * The scale factor is always positive. A value of 1.0 indicates no scaling took place.
 * Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.
 *
 * The Leap derives scaling from the relative inward or outward motion of a hand
 * and its associated fingers and tools (independent of translation and rotation).
 *
 * If a corresponding Hand object is not found in sinceFrame, or if either this frame or sinceFrame
 * are invalid Frame objects, then this method returns 1.0.
 *
 * @method scaleFactor
 * @memberof Leap.Hand.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative scaling.
 * @returns {number} A positive value representing the heuristically determined
 * scaling change ratio of the hand between the current frame and that specified in the sinceFrame parameter.
 */
Hand.prototype.scaleFactor = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return 1.0;
  var sinceHand = sinceFrame.hand(this.id);
  if(!sinceHand.valid) return 1.0;

  return Math.exp(this._scaleFactor - sinceHand._scaleFactor);
}

/**
 * The change of position of this hand between the current frame and the specified frame
 *
 * The returned translation vector provides the magnitude and direction of the
 * movement in millimeters.
 *
 * If a corresponding Hand object is not found in sinceFrame, or if either this frame or
 * sinceFrame are invalid Frame objects, then this method returns a zero vector.
 *
 * @method translation
 * @memberof Leap.Hand.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative translation.
 * @returns {number[]} A Vector representing the heuristically determined change in hand
 * position between the current frame and that specified in the sinceFrame parameter.
 */
Hand.prototype.translation = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return vec3.create();
  var sinceHand = sinceFrame.hand(this.id);
  if(!sinceHand.valid) return vec3.create();
  return [
    this._translation[0] - sinceHand._translation[0],
    this._translation[1] - sinceHand._translation[1],
    this._translation[2] - sinceHand._translation[2]
  ];
}

/**
 * A string containing a brief, human readable description of the Hand object.
 * @method toString
 * @memberof Leap.Hand.prototype
 * @returns {String} A description of the Hand as a string.
 */
Hand.prototype.toString = function() {
  return "Hand [ id: "+ this.id + " | palm velocity:"+this.palmVelocity+" | sphere center:"+this.sphereCenter+" ] ";
}

/**
 * An invalid Hand object.
 *
 * You can use an invalid Hand object in comparisons testing
 * whether a given Hand instance is valid or invalid. (You can also use the
 * Hand valid property.)
 *
 * @static
 * @type {Leap.Hand}
 * @name Invalid
 * @memberof Leap.Hand
 */
Hand.Invalid = {
  valid: false,
  fingers: [],
  tools: [],
  pointables: [],
  pointable: function() { return Pointable.Invalid },
  finger: function() { return Pointable.Invalid },
  toString: function() { return "invalid frame" },
  dump: function() { return this.toString(); },
  rotationAngle: function() { return 0.0; },
  rotationMatrix: function() { return mat3.create(); },
  rotationAxis: function() { return vec3.create(); },
  scaleFactor: function() { return 1.0; },
  translation: function() { return vec3.create(); }
};
</code></pre>
        </article>
    </section>




</div>
<div id="gesture-js" class="doc-section">
    
    <h2 class="page-title">Source: gesture.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var glMatrix = require("gl-matrix")
  , vec3 = glMatrix.vec3
  , EventEmitter = require('events').EventEmitter
  , _ = require('underscore');

/**
 * Constructs a new Gesture object.
 *
 * An uninitialized Gesture object is considered invalid. Get valid instances
 * of the Gesture class, which will be one of the Gesture subclasses, from a
 * Frame object.
 *
 * @class Gesture
 * @abstract
 * @memberof Leap
 * @classdesc
 * The Gesture class represents a recognized movement by the user.
 *
 * The Leap watches the activity within its field of view for certain movement
 * patterns typical of a user gesture or command. For example, a movement from side to
 * side with the hand can indicate a swipe gesture, while a finger poking forward
 * can indicate a screen tap gesture.
 *
 * When the Leap recognizes a gesture, it assigns an ID and adds a
 * Gesture object to the frame gesture list. For continuous gestures, which
 * occur over many frames, the Leap updates the gesture by adding
 * a Gesture object having the same ID and updated properties in each
 * subsequent frame.
 *
 * **Important:** Recognition for each type of gesture must be enabled;
 * otherwise **no gestures are recognized or reported**.
 *
 * Subclasses of Gesture define the properties for the specific movement patterns
 * recognized by the Leap.
 *
 * The Gesture subclasses for include:
 *
 * * CircleGesture -- A circular movement by a finger.
 * * SwipeGesture -- A straight line movement by the hand with fingers extended.
 * * ScreenTapGesture -- A forward tapping movement by a finger.
 * * KeyTapGesture -- A downward tapping movement by a finger.
 *
 * Circle and swipe gestures are continuous and these objects can have a
 * state of start, update, and stop.
 *
 * The screen tap gesture is a discrete gesture. The Leap only creates a single
 * ScreenTapGesture object appears for each tap and it always has a stop state.
 *
 * Get valid Gesture instances from a Frame object. You can get a list of gestures
 * from the Frame gestures array. You can also use the Frame gesture() method
 * to find a gesture in the current frame using an ID value obtained in a
 * previous frame.
 *
 * Gesture objects can be invalid. For example, when you get a gesture by ID
 * using Frame.gesture(), and there is no gesture with that ID in the current
 * frame, then gesture() returns an Invalid Gesture object (rather than a null
 * value). Always check object validity in situations where a gesture might be
 * invalid.
 */
var createGesture = exports.createGesture = function(data) {
  var gesture;
  switch (data.type) {
    case 'circle':
      gesture = new CircleGesture(data);
      break;
    case 'swipe':
      gesture = new SwipeGesture(data);
      break;
    case 'screenTap':
      gesture = new ScreenTapGesture(data);
      break;
    case 'keyTap':
      gesture = new KeyTapGesture(data);
      break;
    default:
      throw "unkown gesture type";
  }
 /**
  * The gesture ID.
  *
  * All Gesture objects belonging to the same recognized movement share the
  * same ID value. Use the ID value with the Frame::gesture() method to
  * find updates related to this Gesture object in subsequent frames.
  *
  * @member id
  * @memberof Leap.Gesture.prototype
  * @type {number}
  */
  gesture.id = data.id;
 /**
  * The list of hands associated with this Gesture, if any.
  *
  * If no hands are related to this gesture, the list is empty.
  *
  * @member handIds
  * @memberof Leap.Gesture.prototype
  * @type {Array}
  */
  gesture.handIds = data.handIds;
 /**
  * The list of fingers and tools associated with this Gesture, if any.
  *
  * If no Pointable objects are related to this gesture, the list is empty.
  *
  * @member pointableIds
  * @memberof Leap.Gesture.prototype
  * @type {Array}
  */
  gesture.pointableIds = data.pointableIds;
 /**
  * The elapsed duration of the recognized movement up to the
  * frame containing this Gesture object, in microseconds.
  *
  * The duration reported for the first Gesture in the sequence (with the
  * start state) will typically be a small positive number since
  * the movement must progress far enough for the Leap to recognize it as
  * an intentional gesture.
  *
  * @member duration
  * @memberof Leap.Gesture.prototype
  * @type {number}
  */
  gesture.duration = data.duration;
 /**
  * The gesture ID.
  *
  * Recognized movements occur over time and have a beginning, a middle,
  * and an end. The 'state()' attribute reports where in that sequence this
  * Gesture object falls.
  *
  * Possible values for the state field are:
  *
  * * start
  * * update
  * * stop
  *
  * @member state
  * @memberof Leap.Gesture.prototype
  * @type {String}
  */
  gesture.state = data.state;
 /**
  * The gesture type.
  *
  * Possible values for the type field are:
  *
  * * circle
  * * swipe
  * * screenTap
  * * keyTap
  *
  * @member type
  * @memberof Leap.Gesture.prototype
  * @type {String}
  */
  gesture.type = data.type;
  return gesture;
}

var gestureListener = exports.gestureListener = function(controller, type) {
  var handlers = {};
  var gestureMap = {};

  var gestureCreator = function() {
    var candidateGesture = gestureMap[gesture.id];
    if (candidateGesture !== undefined) gesture.update(gesture, frame);
    if (gesture.state == "start" || gesture.state == "stop") {
      if (type == gesture.type &amp;&amp; gestureMap[gesture.id] === undefined) {
        gestureMap[gesture.id] = new Gesture(gesture, frame);
        gesture.update(gesture, frame);
      }
      if (gesture.state == "stop") {
        delete gestureMap[gesture.id];
      }
    }
  };

  controller.on('gesture', function(gesture, frame) {
    if (gesture.type == type) {
      if (gesture.state == "start" || gesture.state == "stop") {
        if (gestureMap[gesture.id] === undefined) {
          var gestureTracker = new Gesture(gesture, frame);
          gestureMap[gesture.id] = gestureTracker;
          _.each(handlers, function(cb, name) {
            gestureTracker.on(name, cb);
          });
        }
      }
      gestureMap[gesture.id].update(gesture, frame);
      if (gesture.state == "stop") {
        delete gestureMap[gesture.id];
      }
    }
  });
  var builder = {
    start: function(cb) {
      handlers['start'] = cb;
      return builder;
    },
    stop: function(cb) {
      handlers['stop'] = cb;
      return builder;
    },
    complete: function(cb) {
      handlers['stop'] = cb;
      return builder;
    },
    update: function(cb) {
      handlers['update'] = cb;
      return builder;
    }
  }
  return builder;
}

var Gesture = exports.Gesture = function(gesture, frame) {
  this.gestures = [gesture];
  this.frames = [frame];
}

Gesture.prototype.update = function(gesture, frame) {
  this.gestures.push(gesture);
  this.frames.push(frame);
  this.emit(gesture.state, this);
}

_.extend(Gesture.prototype, EventEmitter.prototype);

/**
 * Constructs a new CircleGesture object.
 *
 * An uninitialized CircleGesture object is considered invalid. Get valid instances
 * of the CircleGesture class from a Frame object.
 *
 * @class CircleGesture
 * @memberof Leap
 * @augments Leap.Gesture
 * @classdesc
 * The CircleGesture classes represents a circular finger movement.
 *
 * A circle movement is recognized when the tip of a finger draws a circle
 * within the Leap field of view.
 *
 * ![CircleGesture](images/Leap_Gesture_Circle.png)
 *
 * Circle gestures are continuous. The CircleGesture objects for the gesture have
 * three possible states:
 *
 * * start -- The circle gesture has just started. The movement has
 *  progressed far enough for the recognizer to classify it as a circle.
 * * update -- The circle gesture is continuing.
 * * stop -- The circle gesture is finished.
 */
var CircleGesture = function(data) {
 /**
  * The center point of the circle within the Leap frame of reference.
  *
  * @member center
  * @memberof Leap.CircleGesture.prototype
  * @type {number[]}
  */
  this.center = data.center;
 /**
  * The normal vector for the circle being traced.
  *
  * If you draw the circle clockwise, the normal vector points in the same
  * general direction as the pointable object drawing the circle. If you draw
  * the circle counterclockwise, the normal points back toward the
  * pointable. If the angle between the normal and the pointable object
  * drawing the circle is less than 90 degrees, then the circle is clockwise.
  *
  * ```javascript
  *    var clockwiseness;
  *    if (circle.pointable.direction.angleTo(circle.normal) &lt;= PI/4) {
  *        clockwiseness = "clockwise";
  *    }
  *    else
  *    {
  *        clockwiseness = "counterclockwise";
  *    }
  * ```
  *
  * @member normal
  * @memberof Leap.CircleGesture.prototype
  * @type {number[]}
  */
  this.normal = data.normal;
 /**
  * The number of times the finger tip has traversed the circle.
  *
  * Progress is reported as a positive number of the number. For example,
  * a progress value of .5 indicates that the finger has gone halfway
  * around, while a value of 3 indicates that the finger has gone around
  * the the circle three times.
  *
  * Progress starts where the circle gesture began. Since the circle
  * must be partially formed before the Leap can recognize it, progress
  * will be greater than zero when a circle gesture first appears in the
  * frame.
  *
  * @member progress
  * @memberof Leap.CircleGesture.prototype
  * @type {number}
  */
  this.progress = data.progress;
 /**
  * The radius of the circle in mm.
  *
  * @member radius
  * @memberof Leap.CircleGesture.prototype
  * @type {number}
  */
  this.radius = data.radius;
}

CircleGesture.prototype.toString = function() {
  return "CircleGesture ["+JSON.stringify(this)+"]";
}

/**
 * Constructs a new SwipeGesture object.
 *
 * An uninitialized SwipeGesture object is considered invalid. Get valid instances
 * of the SwipeGesture class from a Frame object.
 *
 * @class SwipeGesture
 * @memberof Leap
 * @augments Leap.Gesture
 * @classdesc
 * The SwipeGesture class represents a swiping motion of a finger or tool.
 *
 * ![SwipeGesture](images/Leap_Gesture_Swipe.png)
 *
 * Swipe gestures are continuous.
 */
var SwipeGesture = function(data) {
 /**
  * The starting position within the Leap frame of
  * reference, in mm.
  *
  * @member startPosition
  * @memberof Leap.SwipeGesture.prototype
  * @type {number[]}
  */
  this.startPosition = data.startPosition;
 /**
  * The current swipe position within the Leap frame of
  * reference, in mm.
  *
  * @member position
  * @memberof Leap.SwipeGesture.prototype
  * @type {number[]}
  */
  this.position = data.position;
 /**
  * The unit direction vector parallel to the swipe motion.
  *
  * You can compare the components of the vector to classify the swipe as
  * appropriate for your application. For example, if you are using swipes
  * for two dimensional scrolling, you can compare the x and y values to
  * determine if the swipe is primarily horizontal or vertical.
  *
  * @member direction
  * @memberof Leap.SwipeGesture.prototype
  * @type {number[]}
  */
  this.direction = data.direction;
 /**
  * The speed of the finger performing the swipe gesture in
  * millimeters per second.
  *
  * @member speed
  * @memberof Leap.SwipeGesture.prototype
  * @type {number}
  */
  this.speed = data.speed;
}

SwipeGesture.prototype.toString = function() {
  return "SwipeGesture ["+JSON.stringify(this)+"]";
}

/**
 * Constructs a new ScreenTapGesture object.
 *
 * An uninitialized ScreenTapGesture object is considered invalid. Get valid instances
 * of the ScreenTapGesture class from a Frame object.
 *
 * @class ScreenTapGesture
 * @memberof Leap
 * @augments Leap.Gesture
 * @classdesc
 * The ScreenTapGesture class represents a tapping gesture by a finger or tool.
 *
 * A screen tap gesture is recognized when the tip of a finger pokes forward
 * and then springs back to approximately the original postion, as if
 * tapping a vertical screen. The tapping finger must pause briefly before beginning the tap.
 *
 * ![ScreenTap](images/Leap_Gesture_Tap2.png)
 *
 * ScreenTap gestures are discrete. The ScreenTapGesture object representing a tap always
 * has the state, STATE_STOP. Only one ScreenTapGesture object is created for each
 * screen tap gesture recognized.
 */
var ScreenTapGesture = function(data) {
 /**
  * The position where the screen tap is registered.
  *
  * @member position
  * @memberof Leap.ScreenTapGesture.prototype
  * @type {number[]}
  */
  this.position = data.position;
 /**
  * The direction of finger tip motion.
  *
  * @member direction
  * @memberof Leap.ScreenTapGesture.prototype
  * @type {number[]}
  */
  this.direction = data.direction;
 /**
  * The progess value is always 1.0 for a screen tap gesture.
  *
  * @member progress
  * @memberof Leap.ScreenTapGesture.prototype
  * @type {number}
  */
  this.progress = data.progress;
}

ScreenTapGesture.prototype.toString = function() {
  return "ScreenTapGesture ["+JSON.stringify(this)+"]";
}

/**
 * Constructs a new KeyTapGesture object.
 *
 * An uninitialized KeyTapGesture object is considered invalid. Get valid instances
 * of the KeyTapGesture class from a Frame object.
 *
 * @class KeyTapGesture
 * @memberof Leap
 * @augments Leap.Gesture
 * @classdesc
 * The KeyTapGesture class represents a tapping gesture by a finger or tool.
 *
 * A key tap gesture is recognized when the tip of a finger rotates down toward the
 * palm and then springs back to approximately the original postion, as if
 * tapping. The tapping finger must pause briefly before beginning the tap.
 *
 * ![KeyTap](images/Leap_Gesture_Tap.png)
 *
 * Key tap gestures are discrete. The KeyTapGesture object representing a tap always
 * has the state, STATE_STOP. Only one KeyTapGesture object is created for each
 * key tap gesture recognized.
 */
var KeyTapGesture = function(data) {
    /**
     * The position where the key tap is registered.
     *
     * @member position
     * @memberof Leap.KeyTapGesture.prototype
     * @type {number[]}
     */
    this.position = data.position;
    /**
     * The direction of finger tip motion.
     *
     * @member direction
     * @memberof Leap.KeyTapGesture.prototype
     * @type {number[]}
     */
    this.direction = data.direction;
    /**
     * The progess value is always 1.0 for a key tap gesture.
     *
     * @member progress
     * @memberof Leap.KeyTapGesture.prototype
     * @type {number}
     */
    this.progress = data.progress;
}

KeyTapGesture.prototype.toString = function() {
  return "KeyTapGesture ["+JSON.stringify(this)+"]";
}
</code></pre>
        </article>
    </section>




</div>
<div id="frame-js" class="doc-section">
    
    <h2 class="page-title">Source: frame.js</h2>
    
    


    
    <section>
        <article>
            <pre class="prettyprint source"><code>var Hand = require("./hand")
  , Pointable = require("./pointable")
  , createGesture = require("./gesture").createGesture
  , glMatrix = require("gl-matrix")
  , mat3 = glMatrix.mat3
  , vec3 = glMatrix.vec3
  , InteractionBox = require("./interaction_box")
  , _ = require("underscore");

/**
 * Constructs a Frame object.
 *
 * Frame instances created with this constructor are invalid.
 * Get valid Frame objects by calling the
 * [Controller.frame]{@link Leap.Controller#frame}() function.
 *&lt;C-D-Space&gt;
 * @class Frame
 * @memberof Leap
 * @classdesc
 * The Frame class represents a set of hand and finger tracking data detected
 * in a single frame.
 *
 * The Leap detects hands, fingers and tools within the tracking area, reporting
 * their positions, orientations and motions in frames at the Leap frame rate.
 *
 * Access Frame objects using the [Controller.frame]{@link Leap.Controller#frame}() function.
 */
var Frame = module.exports = function(data) {
  /**
   * Reports whether this Frame instance is valid.
   *
   * A valid Frame is one generated by the Controller object that contains
   * tracking data for all detected entities. An invalid Frame contains no
   * actual tracking data, but you can call its functions without risk of a
   * undefined object exception. The invalid Frame mechanism makes it more
   * convenient to track individual data across the frame history. For example,
   * you can invoke:
   *
   * ```javascript
   * var finger = controller.frame(n).finger(fingerID);
   * ```
   *
   * for an arbitrary Frame history value, "n", without first checking whether
   * frame(n) returned a null object. (You should still check that the
   * returned Finger instance is valid.)
   *
   * @member valid
   * @memberof Leap.Frame.prototype
   * @type {Boolean}
   */
  this.valid = true;
  /**
   * A unique ID for this Frame. Consecutive frames processed by the Leap
   * have consecutive increasing values.
   * @member id
   * @memberof Leap.Frame.prototype
   * @type {String}
   */
  this.id = data.id;
  /**
   * The frame capture time in microseconds elapsed since the Leap started.
   * @member timestamp
   * @memberof Leap.Frame.prototype
   * @type {number}
   */
  this.timestamp = data.timestamp;
  /**
   * The list of Hand objects detected in this frame, given in arbitrary order.
   * The list can be empty if no hands are detected.
   *
   * @member hands[]
   * @memberof Leap.Frame.prototype
   * @type {Leap.Hand}
   */
  this.hands = [];
  this.handsMap = {};
  /**
   * The list of Pointable objects (fingers and tools) detected in this frame,
   * given in arbitrary order. The list can be empty if no fingers or tools are
   * detected.
   *
   * @member pointables[]
   * @memberof Leap.Frame.prototype
   * @type {Leap.Pointable}
   */
  this.pointables = [];
  /**
   * The list of Tool objects detected in this frame, given in arbitrary order.
   * The list can be empty if no tools are detected.
   *
   * @member tools[]
   * @memberof Leap.Frame.prototype
   * @type {Leap.Pointable}
   */
  this.tools = [];
  /**
   * The list of Finger objects detected in this frame, given in arbitrary order.
   * The list can be empty if no fingers are detected.
   * @member fingers[]
   * @memberof Leap.Frame.prototype
   * @type {Leap.Pointable}
   */
  this.fingers = [];

  if (data.interactionBox) {
    this.interactionBox = new InteractionBox(data.interactionBox);
  }
  this.gestures = [];
  this.pointablesMap = {};
  this._translation = data.t;
  this._rotation = _.flatten(data.r);
  this._scaleFactor = data.s;
  this.data = data;
  this.type = 'frame'; // used by event emitting
  this.currentFrameRate = data.currentFrameRate;
  var handMap = {};
  for (var handIdx = 0, handCount = data.hands.length; handIdx != handCount; handIdx++) {
    var hand = new Hand(data.hands[handIdx]);
    hand.frame = this;
    this.hands.push(hand);
    this.handsMap[hand.id] = hand;
    handMap[hand.id] = handIdx;
  }
  for (var pointableIdx = 0, pointableCount = data.pointables.length; pointableIdx != pointableCount; pointableIdx++) {
    var pointable = new Pointable(data.pointables[pointableIdx]);
    pointable.frame = this;
    this.pointables.push(pointable);
    this.pointablesMap[pointable.id] = pointable;
    (pointable.tool ? this.tools : this.fingers).push(pointable);
    if (pointable.handId !== undefined &amp;&amp; handMap.hasOwnProperty(pointable.handId)) {
      var hand = this.hands[handMap[pointable.handId]];
      hand.pointables.push(pointable);
      (pointable.tool ? hand.tools : hand.fingers).push(pointable);
    }
  }

  if (data.gestures) {
   /**
    * The list of Gesture objects detected in this frame, given in arbitrary order.
    * The list can be empty if no gestures are detected.
    *
    * Circle and swipe gestures are updated every frame. Tap gestures
    * only appear in the list for a single frame.
    * @member gestures[]
    * @memberof Leap.Frame.prototype
    * @type {Leap.Gesture}
    */
    for (var gestureIdx = 0, gestureCount = data.gestures.length; gestureIdx != gestureCount; gestureIdx++) {
      this.gestures.push(createGesture(data.gestures[gestureIdx]));
    }
  }
}

/**
 * The tool with the specified ID in this frame.
 *
 * Use the Frame tool() function to retrieve a tool from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Pointable object, but if no tool
 * with the specified ID is present, an invalid Pointable object is returned.
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a tool is lost and subsequently
 * regained, the new Pointable object representing that tool may have a
 * different ID than that representing the tool in an earlier frame.
 *
 * @method tool
 * @memberof Leap.Frame.prototype
 * @param {String} id The ID value of a Tool object from a previous frame.
 * @returns {Leap.Pointable} The tool with the
 * matching ID if one exists in this frame; otherwise, an invalid Pointable object
 * is returned.
 */
Frame.prototype.tool = function(id) {
  var pointable = this.pointable(id);
  return pointable.tool ? pointable : Pointable.Invalid;
}

/**
 * The Pointable object with the specified ID in this frame.
 *
 * Use the Frame pointable() function to retrieve the Pointable object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Pointable object, but if no finger or tool
 * with the specified ID is present, an invalid Pointable object is returned.
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a finger or tool is lost and subsequently
 * regained, the new Pointable object representing that finger or tool may have
 * a different ID than that representing the finger or tool in an earlier frame.
 *
 * @method pointable
 * @memberof Leap.Frame.prototype
 * @param {String} id The ID value of a Pointable object from a previous frame.
 * @returns {Leap.Pointable} The Pointable object with
 * the matching ID if one exists in this frame;
 * otherwise, an invalid Pointable object is returned.
 */
Frame.prototype.pointable = function(id) {
  return this.pointablesMap[id] || Pointable.Invalid;
}

/**
 * The finger with the specified ID in this frame.
 *
 * Use the Frame finger() function to retrieve the finger from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Finger object, but if no finger
 * with the specified ID is present, an invalid Pointable object is returned.
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a finger is lost and subsequently
 * regained, the new Pointable object representing that physical finger may have
 * a different ID than that representing the finger in an earlier frame.
 *
 * @method finger
 * @memberof Leap.Frame.prototype
 * @param {String} id The ID value of a finger from a previous frame.
 * @returns {Leap.Pointable} The finger with the
 * matching ID if one exists in this frame; otherwise, an invalid Pointable
 * object is returned.
 */
Frame.prototype.finger = function(id) {
  var pointable = this.pointable(id);
  return !pointable.tool ? pointable : Pointable.Invalid;
}

/**
 * The Hand object with the specified ID in this frame.
 *
 * Use the Frame hand() function to retrieve the Hand object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Hand object, but if no hand
 * with the specified ID is present, an invalid Hand object is returned.
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a hand is lost and subsequently
 * regained, the new Hand object representing that physical hand may have
 * a different ID than that representing the physical hand in an earlier frame.
 *
 * @method hand
 * @memberof Leap.Frame.prototype
 * @param {String} id The ID value of a Hand object from a previous frame.
 * @returns {Leap.Hand} The Hand object with the matching
 * ID if one exists in this frame; otherwise, an invalid Hand object is returned.
 */
Frame.prototype.hand = function(id) {
  return this.handsMap[id] || Hand.Invalid;
}

/**
 * The angle of rotation around the rotation axis derived from the overall
 * rotational motion between the current frame and the specified frame.
 *
 * The returned angle is expressed in radians measured clockwise around
 * the rotation axis (using the right-hand rule) between the start and end frames.
 * The value is always between 0 and pi radians (0 and 180 degrees).
 *
 * The Leap derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then the
 * angle of rotation is zero.
 *
 * @method rotationAngle
 * @memberof Leap.Frame.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @param {number[]} [axis] The axis to measure rotation around.
 * @returns {number} A positive value containing the heuristically determined
 * rotational change between the current frame and that specified in the sinceFrame parameter.
 */
Frame.prototype.rotationAngle = function(sinceFrame, axis) {
  if (!this.valid || !sinceFrame.valid) return 0.0;

  var rot = this.rotationMatrix(sinceFrame);
  var cs = (rot[0] + rot[4] + rot[8] - 1.0)*0.5
  var angle = Math.acos(cs);
  angle = isNaN(angle) ? 0.0 : angle;

  if (axis !== undefined) {
    var rotAxis = this.rotationAxis(sinceFrame);
    angle *= vec3.dot(rotAxis, vec3.normalize(vec3.create(), axis));
  }

  return angle;
}

/**
 * The axis of rotation derived from the overall rotational motion between
 * the current frame and the specified frame.
 *
 * The returned direction vector is normalized.
 *
 * The Leap derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, or if no
 * rotation is detected between the two frames, a zero vector is returned.
 *
 * @method rotationAxis
 * @memberof Leap.Frame.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @returns {number[]} A normalized direction vector representing the axis of the heuristically determined
 * rotational change between the current frame and that specified in the sinceFrame parameter.
 */
Frame.prototype.rotationAxis = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return vec3.create();
  return vec3.normalize(vec3.create(), [
    this._rotation[7] - sinceFrame._rotation[5],
    this._rotation[2] - sinceFrame._rotation[6],
    this._rotation[3] - sinceFrame._rotation[1]
  ]);
}

/**
 * The transform matrix expressing the rotation derived from the overall
 * rotational motion between the current frame and the specified frame.
 *
 * The Leap derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then
 * this method returns an identity matrix.
 *
 * @method rotationMatrix
 * @memberof Leap.Frame.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative rotation.
 * @returns {number[]} A transformation matrix containing the heuristically determined
 * rotational change between the current frame and that specified in the sinceFrame parameter.
 */
Frame.prototype.rotationMatrix = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return mat3.create();
  var transpose = mat3.transpose(mat3.create(), this._rotation)
  return mat3.multiply(mat3.create(), sinceFrame._rotation, transpose);
}

/**
 * The scale factor derived from the overall motion between the current frame and the specified frame.
 *
 * The scale factor is always positive. A value of 1.0 indicates no scaling took place.
 * Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.
 *
 * The Leap derives scaling from the relative inward or outward motion of all
 * objects detected in the field of view (independent of translation and rotation).
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this method returns 1.0.
 *
 * @method scaleFactor
 * @memberof Leap.Frame.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative scaling.
 * @returns {number} A positive value representing the heuristically determined
 * scaling change ratio between the current frame and that specified in the sinceFrame parameter.
 */
Frame.prototype.scaleFactor = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return 1.0;
  return Math.exp(this._scaleFactor - sinceFrame._scaleFactor);
}

/**
 * The change of position derived from the overall linear motion between the
 * current frame and the specified frame.
 *
 * The returned translation vector provides the magnitude and direction of the
 * movement in millimeters.
 *
 * The Leap derives frame translation from the linear motion of all objects
 * detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns a zero vector.
 *
 * @method translation
 * @memberof Leap.Frame.prototype
 * @param {Leap.Frame} sinceFrame The starting frame for computing the relative translation.
 * @returns {number[]} A vector representing the heuristically determined change in
 * position of all objects between the current frame and that specified in the sinceFrame parameter.
 */
Frame.prototype.translation = function(sinceFrame) {
  if (!this.valid || !sinceFrame.valid) return vec3.create();
  return vec3.subtract(vec3.create(), this._translation, sinceFrame._translation);
}

/**
 * A string containing a brief, human readable description of the Frame object.
 *
 * @method toString
 * @memberof Leap.Frame.prototype
 * @returns {String} A brief description of this frame.
 */
Frame.prototype.toString = function() {
  var str = "Frame [ id:"+this.id+" | timestamp:"+this.timestamp+" | Hand count:("+this.hands.length+") | Pointable count:("+this.pointables.length+")";
  if (this.gestures) str += " | Gesture count:("+this.gestures.length+")";
  str += " ]";
  return str;
}

/**
 * Returns a JSON-formatted string containing the hands, pointables and gestures
 * in this frame.
 *
 * @method dump
 * @memberof Leap.Frame.prototype
 * @returns {String} A JSON-formatted string.
 */
Frame.prototype.dump = function() {
  var out = '';
  out += "Frame Info:&lt;br/&gt;";
  out += this.toString();
  out += "&lt;br/&gt;&lt;br/&gt;Hands:&lt;br/&gt;"
  for (var handIdx = 0, handCount = this.hands.length; handIdx != handCount; handIdx++) {
    out += "  "+ this.hands[handIdx].toString() + "&lt;br/&gt;";
  }
  out += "&lt;br/&gt;&lt;br/&gt;Pointables:&lt;br/&gt;";
  for (var pointableIdx = 0, pointableCount = this.pointables.length; pointableIdx != pointableCount; pointableIdx++) {
      out += "  "+ this.pointables[pointableIdx].toString() + "&lt;br/&gt;";
  }
  if (this.gestures) {
    out += "&lt;br/&gt;&lt;br/&gt;Gestures:&lt;br/&gt;";
    for (var gestureIdx = 0, gestureCount = this.gestures.length; gestureIdx != gestureCount; gestureIdx++) {
        out += "  "+ this.gestures[gestureIdx].toString() + "&lt;br/&gt;";
    }
  }
  out += "&lt;br/&gt;&lt;br/&gt;Raw JSON:&lt;br/&gt;";
  out += JSON.stringify(this.data);
  return out;
}

/**
 * An invalid Frame object.
 *
 * You can use this invalid Frame in comparisons testing
 * whether a given Frame instance is valid or invalid. (You can also check the
 * [Frame.valid]{@link Leap.Frame#valid} property.)
 *
 * @static
 * @type {Leap.Frame}
 * @name Invalid
 * @memberof Leap.Frame
 */
Frame.Invalid = {
  valid: false,
  hands: [],
  fingers: [],
  tools: [],
  gestures: [],
  pointables: [],
  pointable: function() { return Pointable.Invalid },
  finger: function() { return Pointable.Invalid },
  hand: function() { return Hand.Invalid },
  toString: function() { return "invalid frame" },
  dump: function() { return this.toString() },
  rotationAngle: function() { return 0.0; },
  rotationMatrix: function() { return mat3.create(); },
  rotationAxis: function() { return vec3.create(); },
  scaleFactor: function() { return 1.0; },
  translation: function() { return vec3.create(); }
};
</code></pre>
        </article>
    </section>




</div>
<div id="leap-hand" class="doc-section">
    
    <h2 class="page-title">Class: Hand</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    Hand
    </h3>
    
        <div class="class-description">The Hand class reports the physical characteristics of a detected hand.

Hand tracking data includes a palm position and velocity; vectors for
the palm normal and direction to the fingers; properties of a sphere fit
to the hand; and lists of the attached fingers and tools.

Note that Hand objects can be invalid, which means that they do not contain
valid tracking data and do not correspond to a physical entity. Invalid Hand
objects can be the result of asking for a Hand object using an ID from an
earlier frame when no Hand objects with that ID exist in the current frame.
A Hand object created from the Hand constructor is also invalid.
Test for validity with the [Hand.valid]<span>Leap.Hand#valid</span> property.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="Hand">
<span class="type-signature"></span>new Hand<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a Hand object.

An uninitialized hand is considered invalid.
Get valid Hand objects from a Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 7</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="Invalid">
<span class="type-signature">&lt;static&gt; </span>Invalid<span class="type-signature"> :<span>Leap.Hand</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        An invalid Hand object.

You can use an invalid Hand object in comparisons testing
whether a given Hand instance is valid or invalid. (You can also use the
Hand valid property.)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Hand</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 343</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="direction">
<span class="type-signature"></span>direction<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The direction from the palm position toward the fingers.

The direction is expressed as a unit vector pointing in the same
direction as the directed line from the palm position to the fingers.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 51</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="fingers[]">
<span class="type-signature"></span>fingers[]<span class="type-signature"> :Leap.Pointable[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of fingers detected in this frame that are attached to
this hand, given in arbitrary order.

The list can be empty if no fingers attached to this hand are detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Leap.Pointable[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 128</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        A unique ID assigned to this Hand object, whose value remains the same
across consecutive frames while the tracked hand remains visible. If
tracking is lost (for example, when a hand is occluded by another hand
or when it is withdrawn from or reaches the edge of the Leap field of view),
the Leap may assign a new ID when it detects the hand in a future frame.

Use the ID value with the Frame.hand() function to find this
Hand object in future frames.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 29</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="palmNormal">
<span class="type-signature"></span>palmNormal<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The normal vector to the palm. If your hand is flat, this vector will
point downward, or "out" of the front surface of your palm.

![Palm Vectors](images/Leap_Palm_Vectors.png)

The direction is expressed as a unit vector pointing in the same
direction as the palm normal (that is, a vector orthogonal to the palm).
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 70</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="palmPosition">
<span class="type-signature"></span>palmPosition<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The center position of the palm in millimeters from the Leap origin.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 44</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="palmVeclocity">
<span class="type-signature"></span>palmVeclocity<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The rate of change of the palm position in millimeters/second.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 62</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointables[]">
<span class="type-signature"></span>pointables[]<span class="type-signature"> :Leap.Pointable[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Pointable objects (fingers and tools) detected in this frame
that are associated with this hand, given in arbitrary order. The list
can be empty if no fingers or tools associated with this hand are detected.

Use the <span>Pointable</span> tool property to determine
whether or not an item in the list represents a tool or finger.
You can also get only the tools using the Hand.tools[] list or
only the fingers using the Hand.fingers[] list.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Leap.Pointable[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 113</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="sphereCenter">
<span class="type-signature"></span>sphereCenter<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The center of a sphere fit to the curvature of this hand.

This sphere is placed roughly as if the hand were holding a ball.

![Hand Ball](images/Leap_Hand_Ball.png)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 83</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="sphereRadius">
<span class="type-signature"></span>sphereRadius<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The radius of a sphere fit to the curvature of this hand, in millimeters.

This sphere is placed roughly as if the hand were holding a ball. Thus the
size of the sphere decreases as the fingers are curled into a fist.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 94</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="stabilizedPalmPosition">
<span class="type-signature"></span>stabilizedPalmPosition<span class="type-signature"> :number[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The palm position with stabalization
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 161</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tools[]">
<span class="type-signature"></span>tools[]<span class="type-signature"> :Leap.Pointable[]</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of tools detected in this frame that are held by this
hand, given in arbitrary order.

The list can be empty if no tools held by this hand are detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Leap.Pointable[]</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 139</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="valid">
<span class="type-signature"></span>valid<span class="type-signature"> :boolean</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        Reports whether this is a valid Hand object.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">boolean</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 105</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="finger">
<span class="type-signature"></span>finger<span class="signature">(id)</span><span class="type-signature"> â†’ {<span>Leap.Pointable</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The finger with the specified ID attached to this hand.

Use this function to retrieve a Pointable object representing a finger
attached to this hand using an ID value obtained from a previous frame.
This function always returns a Pointable object, but if no finger
with the specified ID is present, an invalid Pointable object is returned.

Note that the ID values assigned to fingers persist across frames, but only
until tracking of a particular finger is lost. If tracking of a finger is
lost and subsequently regained, the new Finger object representing that
finger may have a different ID than that representing the finger in an
earlier frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>id</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The ID value of a finger from a previous frame.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 170</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The Finger object with
the matching ID if one exists for this hand in this frame; otherwise, an
invalid Finger object is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Pointable</span></span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationAngle">
<span class="type-signature"></span>rotationAngle<span class="signature">(sinceFrame, <span class="optional">axis</span>)</span><span class="type-signature"> â†’ {number}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The angle of rotation around the rotation axis derived from the change in
orientation of this hand, and any associated fingers and tools, between the
current frame and the specified frame.

The returned angle is expressed in radians measured clockwise around the
rotation axis (using the right-hand rule) between the start and end frames.
The value is always between 0 and pi radians (0 and 180 degrees).

If a corresponding Hand object is not found in sinceFrame, or if either
this frame or sinceFrame are invalid Frame objects, then the angle of rotation is zero.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		<th>Argument</th>
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
                <td class="attributes">
                
                    
                
                    
                
                </td>
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	
        <tr>
            
                <td class="name"><code>axis</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">numnber[]</span>


            
            </td>
            
            
                <td class="attributes">
                
                    &lt;optional&gt;<br>
                
                    
                
                    
                
                </td>
            
            
            
            
            <td class="description last">The axis to measure rotation around.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 196</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A positive value representing the heuristically determined
rotational change of the hand between the current frame and that specified in
the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationAxis">
<span class="type-signature"></span>rotationAxis<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The axis of rotation derived from the change in orientation of this hand, and
any associated fingers and tools, between the current frame and the specified frame.

The returned direction vector is normalized.

If a corresponding Hand object is not found in sinceFrame, or if either
this frame or sinceFrame are invalid Frame objects, then this method returns a zero vector.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 231</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A normalized direction Vector representing the axis of the heuristically determined
rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationMatrix">
<span class="type-signature"></span>rotationMatrix<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The transform matrix expressing the rotation derived from the change in
orientation of this hand, and any associated fingers and tools, between
the current frame and the specified frame.

If a corresponding Hand object is not found in sinceFrame, or if either
this frame or sinceFrame are invalid Frame objects, then this method returns
an identity matrix.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 257</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A transformation Matrix containing the heuristically determined
rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="scaleFactor">
<span class="type-signature"></span>scaleFactor<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The scale factor derived from the hand's motion between the current frame and the specified frame.

The scale factor is always positive. A value of 1.0 indicates no scaling took place.
Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.

The Leap derives scaling from the relative inward or outward motion of a hand
and its associated fingers and tools (independent of translation and rotation).

If a corresponding Hand object is not found in sinceFrame, or if either this frame or sinceFrame
are invalid Frame objects, then this method returns 1.0.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative scaling.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 281</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A positive value representing the heuristically determined
scaling change ratio of the hand between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="toString">
<span class="type-signature"></span>toString<span class="signature">()</span><span class="type-signature"> â†’ {String}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        A string containing a brief, human readable description of the Hand object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 333</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A description of the Hand as a string.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">String</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="translation">
<span class="type-signature"></span>translation<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The change of position of this hand between the current frame and the specified frame

The returned translation vector provides the magnitude and direction of the
movement in millimeters.

If a corresponding Hand object is not found in sinceFrame, or if either this frame or
sinceFrame are invalid Frame objects, then this method returns a zero vector.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative translation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>hand.js</span>, <span>line 307</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A Vector representing the heuristically determined change in hand
position between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>
<div id="leap-frame" class="doc-section">
    
    <h2 class="page-title">Class: Frame</h2>
    
    



<section>
    
<header>
    <h3>
        <span class="ancestors"><span>Leap</span>.</span>
    
    Frame
    </h3>
    
        <div class="class-description">The Frame class represents a set of hand and finger tracking data detected
in a single frame.

The Leap detects hands, fingers and tools within the tracking area, reporting
their positions, orientations and motions in frames at the Leap frame rate.

Access Frame objects using the [Controller.frame]<span>Leap.Controller#frame</span>() function.</div>
    
</header>  

<article>
    <div class="container-overview">
    
    
    
        
<dt>
    <h5 class="name" id="Frame">
<span class="type-signature"></span>new Frame<span class="signature">()</span><span class="type-signature"></span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Constructs a Frame object.

Frame instances created with this constructor are invalid.
Get valid Frame objects by calling the
[Controller.frame]<span>Leap.Controller#frame</span>() function.
<c-d-space>
    </c-d-space>
</div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 10</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    
    
</dd>

    
    </div>
    
    
    
    
    
    
    
    
    
    
    
    
        <h4 class="subsection-title">Members</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="Invalid">
<span class="type-signature">&lt;static&gt; </span>Invalid<span class="type-signature"> :<span>Leap.Frame</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        An invalid Frame object.

You can use this invalid Frame in comparisons testing
whether a given Frame instance is valid or invalid. (You can also check the
[Frame.valid]<span>Leap.Frame#valid</span> property.)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Frame</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 428</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="fingers[]">
<span class="type-signature"></span>fingers[]<span class="type-signature"> :<span>Leap.Pointable</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Finger objects detected in this frame, given in arbitrary order.
The list can be empty if no fingers are detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Pointable</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 96</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="gestures[]">
<span class="type-signature"></span>gestures[]<span class="type-signature"> :<span>Leap.Gesture</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Gesture objects detected in this frame, given in arbitrary order.
The list can be empty if no gestures are detected.

Circle and swipe gestures are updated every frame. Tap gestures
only appear in the list for a single frame.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Gesture</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 138</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="hands[]">
<span class="type-signature"></span>hands[]<span class="type-signature"> :<span>Leap.Hand</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Hand objects detected in this frame, given in arbitrary order.
The list can be empty if no hands are detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Hand</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 67</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="id">
<span class="type-signature"></span>id<span class="type-signature"> :String</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        A unique ID for this Frame. Consecutive frames processed by the Leap
have consecutive increasing values.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">String</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 52</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointables[]">
<span class="type-signature"></span>pointables[]<span class="type-signature"> :<span>Leap.Pointable</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Pointable objects (fingers and tools) detected in this frame,
given in arbitrary order. The list can be empty if no fingers or tools are
detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Pointable</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 77</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="timestamp">
<span class="type-signature"></span>timestamp<span class="type-signature"> :number</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The frame capture time in microseconds elapsed since the Leap started.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">number</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 60</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tools[]">
<span class="type-signature"></span>tools[]<span class="type-signature"> :<span>Leap.Pointable</span></span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        The list of Tool objects detected in this frame, given in arbitrary order.
The list can be empty if no tools are detected.
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type"><span>Leap.Pointable</span></span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 87</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        
            
<dt>
    <h5 class="name" id="valid">
<span class="type-signature"></span>valid<span class="type-signature"> :Boolean</span>
</h5>
    
    
</dt>
<dd>
    
    <div class="description">
        Reports whether this Frame instance is valid.

A valid Frame is one generated by the Controller object that contains
tracking data for all detected entities. An invalid Frame contains no
actual tracking data, but you can call its functions without risk of a
undefined object exception. The invalid Frame mechanism makes it more
convenient to track individual data across the frame history. For example,
you can invoke:

```javascript
var finger = controller.frame(n).finger(fingerID);
```

for an arbitrary Frame history value, "n", without first checking whether
frame(n) returned a null object. (You should still check that the
returned Finger instance is valid.)
    </div>
    
    
    
        <h6>Type:</h6>
        <ul>
            <li>
                
<span class="param-type">Boolean</span>


            </li>
        </ul>
    

    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 29</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    
</dd>

        </dl>
    
    
    
        <h4 class="subsection-title">Methods</h4>
        
        <dl>
            
<dt>
    <h5 class="name" id="dump">
<span class="type-signature"></span>dump<span class="signature">()</span><span class="type-signature"> â†’ {String}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        Returns a JSON-formatted string containing the hands, pointables and gestures
in this frame.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 397</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A JSON-formatted string.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">String</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="finger">
<span class="type-signature"></span>finger<span class="signature">(id)</span><span class="type-signature"> â†’ {<span>Leap.Pointable</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The finger with the specified ID in this frame.

Use the Frame finger() function to retrieve the finger from
this frame using an ID value obtained from a previous frame.
This function always returns a Finger object, but if no finger
with the specified ID is present, an invalid Pointable object is returned.

Note that ID values persist across frames, but only until tracking of a
particular object is lost. If tracking of a finger is lost and subsequently
regained, the new Pointable object representing that physical finger may have
a different ID than that representing the finger in an earlier frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>id</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The ID value of a finger from a previous frame.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 203</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The finger with the
matching ID if one exists in this frame; otherwise, an invalid Pointable
object is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Pointable</span></span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="hand">
<span class="type-signature"></span>hand<span class="signature">(id)</span><span class="type-signature"> â†’ {<span>Leap.Hand</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The Hand object with the specified ID in this frame.

Use the Frame hand() function to retrieve the Hand object from
this frame using an ID value obtained from a previous frame.
This function always returns a Hand object, but if no hand
with the specified ID is present, an invalid Hand object is returned.

Note that ID values persist across frames, but only until tracking of a
particular object is lost. If tracking of a hand is lost and subsequently
regained, the new Hand object representing that physical hand may have
a different ID than that representing the physical hand in an earlier frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>id</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The ID value of a Hand object from a previous frame.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 228</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The Hand object with the matching
ID if one exists in this frame; otherwise, an invalid Hand object is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Hand</span></span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="pointable">
<span class="type-signature"></span>pointable<span class="signature">(id)</span><span class="type-signature"> â†’ {<span>Leap.Pointable</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The Pointable object with the specified ID in this frame.

Use the Frame pointable() function to retrieve the Pointable object from
this frame using an ID value obtained from a previous frame.
This function always returns a Pointable object, but if no finger or tool
with the specified ID is present, an invalid Pointable object is returned.

Note that ID values persist across frames, but only until tracking of a
particular object is lost. If tracking of a finger or tool is lost and subsequently
regained, the new Pointable object representing that finger or tool may have
a different ID than that representing the finger or tool in an earlier frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>id</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The ID value of a Pointable object from a previous frame.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 179</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The Pointable object with
the matching ID if one exists in this frame;
otherwise, an invalid Pointable object is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Pointable</span></span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationAngle">
<span class="type-signature"></span>rotationAngle<span class="signature">(sinceFrame, <span class="optional">axis</span>)</span><span class="type-signature"> â†’ {number}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The angle of rotation around the rotation axis derived from the overall
rotational motion between the current frame and the specified frame.

The returned angle is expressed in radians measured clockwise around
the rotation axis (using the right-hand rule) between the start and end frames.
The value is always between 0 and pi radians (0 and 180 degrees).

The Leap derives frame rotation from the relative change in position and
orientation of all objects detected in the field of view.

If either this frame or sinceFrame is an invalid Frame object, then the
angle of rotation is zero.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		<th>Argument</th>
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
                <td class="attributes">
                
                    
                
                    
                
                </td>
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	
        <tr>
            
                <td class="name"><code>axis</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">number[]</span>


            
            </td>
            
            
                <td class="attributes">
                
                    &lt;optional&gt;<br>
                
                    
                
                    
                
                </td>
            
            
            
            
            <td class="description last">The axis to measure rotation around.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 251</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A positive value containing the heuristically determined
rotational change between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationAxis">
<span class="type-signature"></span>rotationAxis<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The axis of rotation derived from the overall rotational motion between
the current frame and the specified frame.

The returned direction vector is normalized.

The Leap derives frame rotation from the relative change in position and
orientation of all objects detected in the field of view.

If either this frame or sinceFrame is an invalid Frame object, or if no
rotation is detected between the two frames, a zero vector is returned.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 288</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A normalized direction vector representing the axis of the heuristically determined
rotational change between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="rotationMatrix">
<span class="type-signature"></span>rotationMatrix<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The transform matrix expressing the rotation derived from the overall
rotational motion between the current frame and the specified frame.

The Leap derives frame rotation from the relative change in position and
orientation of all objects detected in the field of view.

If either this frame or sinceFrame is an invalid Frame object, then
this method returns an identity matrix.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative rotation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 315</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A transformation matrix containing the heuristically determined
rotational change between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="scaleFactor">
<span class="type-signature"></span>scaleFactor<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The scale factor derived from the overall motion between the current frame and the specified frame.

The scale factor is always positive. A value of 1.0 indicates no scaling took place.
Values between 0.0 and 1.0 indicate contraction and values greater than 1.0 indicate expansion.

The Leap derives scaling from the relative inward or outward motion of all
objects detected in the field of view (independent of translation and rotation).

If either this frame or sinceFrame is an invalid Frame object, then this method returns 1.0.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative scaling.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 337</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A positive value representing the heuristically determined
scaling change ratio between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="tool">
<span class="type-signature"></span>tool<span class="signature">(id)</span><span class="type-signature"> â†’ {<span>Leap.Pointable</span>}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The tool with the specified ID in this frame.

Use the Frame tool() function to retrieve a tool from
this frame using an ID value obtained from a previous frame.
This function always returns a Pointable object, but if no tool
with the specified ID is present, an invalid Pointable object is returned.

Note that ID values persist across frames, but only until tracking of a
particular object is lost. If tracking of a tool is lost and subsequently
regained, the new Pointable object representing that tool may have a
different ID than that representing the tool in an earlier frame.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>id</code></td>
            
            
            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>
            
            
            
            
            
            <td class="description last">The ID value of a Tool object from a previous frame.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 154</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    The tool with the
matching ID if one exists in this frame; otherwise, an invalid Pointable object
is returned.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type"><span>Leap.Pointable</span></span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="toString">
<span class="type-signature"></span>toString<span class="signature">()</span><span class="type-signature"> â†’ {String}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        A string containing a brief, human readable description of the Frame object.
    </div>
    

    
    
    
    
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 383</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A brief description of this frame.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">String</span>


	</dd>
</dl>

        
    
    
</dd>

        
            
<dt>
    <h5 class="name" id="translation">
<span class="type-signature"></span>translation<span class="signature">(sinceFrame)</span><span class="type-signature"> â†’ {number[]}</span>
</h5>
    
    
</dt>
<dd>
    
    
    <div class="description">
        The change of position derived from the overall linear motion between the
current frame and the specified frame.

The returned translation vector provides the magnitude and direction of the
movement in millimeters.

The Leap derives frame translation from the linear motion of all objects
detected in the field of view.

If either this frame or sinceFrame is an invalid Frame object, then this
method returns a zero vector.
    </div>
    

    
    
    
    
    
        <h6>Parameters:</h6>
        

<table class="params">
    <thead>
	<tr>
		
		<th>Name</th>
		
		
		<th>Type</th>
		
		
		
		
		
		<th class="last">Description</th>
	</tr>
	</thead>
	
	<tbody>
	
	
        <tr>
            
                <td class="name"><code>sinceFrame</code></td>
            
            
            <td class="type">
            
                
<span class="param-type"><span>Leap.Frame</span></span>


            
            </td>
            
            
            
            
            
            <td class="description last">The starting frame for computing the relative translation.</td>
        </tr>
	
	
	</tbody>
</table>
    
    
    
<dl class="details">
    
        
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <span>frame.js</span>, <span>line 359</span>
    </li></ul></dd>
    
    
    
    
    
    
    
</dl>

    
    

    

    
    
    
    
    
    <h6>Returns:</h6>
    
            
<div class="param-desc">
    A vector representing the heuristically determined change in
position of all objects between the current frame and that specified in the sinceFrame parameter.
</div>



<dl>
	<dt>
		Type
	</dt>
	<dd>
		
<span class="param-type">number[]</span>


	</dd>
</dl>

        
    
    
</dd>

        </dl>
    
    
    
    
    
</article>

</section>  




</div>